// For distance calculation
#define difference 63
#define total_data 28

// For division
#define zero 50
#define one 51
#define shifted_d 52
#define source 54
#define shifted_s 54
#define subtractor 55
#define compare_result 56
#define compare_mask 57
#define counter 58
#define loop_max 59
#define num_bit 16

// For square root
// initialize this to 2^(Bits(n)/2)
#define x0_init 60
// not initialized
#define x0_tmp 61
// not initialized
#define x1_tmp 62
// initialize this to 2 (can also do INIT1, INC)
#define const_two 63
// not initialized; doesn't need to persist across programmed_division calls
#define mask_tmp 48
// (same as mask_tmp)
#define mask_clear_throwaway 49

// compute stuff
#define num_rf 64
#define num_lane 8

JUMP main

func programmed_division(divider,dividend,quotient,mask_param)
	UNMASK

	INIT0 [counter]
	INIT1 [loop_max]
	LSHIFT [loop_max] [loop_max]
	LSHIFT [loop_max] [loop_max]
	LSHIFT [loop_max] [loop_max]
	LSHIFT [loop_max] [loop_max]
	DEC [loop_max] [loop_max]

	SETMASK [mask_param]

	MOV [divider] [source]
	MOV [dividend] [shifted_d]

	INIT0 [zero]
	INIT1 [one]
	INIT0 [quotient]

	// Shift the divider 16 time before starting division
	for (itr = 0; itr < [num_bit]; itr += 1)
		LSHIFT [shifted_d] [shifted_d]
	endfor

	// First iteration (no quotient shift)
	LSHIFT [source] [shifted_s]

	// Generate quotient bit
	CMPST [shifted_s] [shifted_d]
	LFLUSH
	GETMASK [compare_result]
	DINV [compare_result]
	AND [compare_result] [shifted_d] [subtractor]

	// Record quotient bit in the output operand
	AND [one] [compare_result] [compare_mask]
	OR [compare_mask] [quotient] [quotient]

	// Perform subtraction (partial remainder generation)
	SUB [shifted_s] [subtractor] [source] 

	// Perform partial remainder generation iteratively
	//for (itr = 0; itr < [num_bit-1]; itr += 1)
	.partial_generation:
	// add this to reset torus
	GETMASK [compare_result]
	SETMASK [mask_param]

	LSHIFT [quotient] [quotient]
	LSHIFT [source] [shifted_s]

	// Generate quotient bit
	CMPST [shifted_s] [shifted_d]
	LFLUSH
	GETMASK [compare_result]
	DINV [compare_result]
	AND [compare_result] [shifted_d] [subtractor]

	// Record quotient bit in the output operand
	AND [one] [compare_result] [compare_mask]
	OR [compare_mask] [quotient] [quotient]

	// Perform subtraction (partial remainder generation)
	SUB [shifted_s] [subtractor] [source] 

	UNMASK
	// dynamic loop check
	INC [counter] [counter]
	CMPEQ [counter] [loop_max]
	LFLUSH

	JUMP_COND .partial_generation
	//endfor
	// add this to reset torus
	GETMASK [compare_result]

	SETMASK [mask_param]
endfunc

main:
for (regfile = 0; regfile < 1; regfile += 1)
  COMPUTE_ALL [regfile]
endfor

// for (iter = 0; iter < [total_data]; iter += 2)
for (iter = 0; iter < 1; iter += 2)
	if 62,61<-([iter] > [iter+total_data])
		SUB [iter] [iter+total_data] [difference]
	else
		SUB [iter+total_data] [iter] [difference]
	endif
	
	MUL32 [difference] [difference] [difference]
	
	INIT0 [iter/2]
	ADD [iter/2] [difference] [iter/2]
	
	if 62,61<-([iter+1] > [iter+total_data+1])
		SUB [iter+1] [iter+total_data+1] [difference]
	else
		SUB [iter+total_data+1] [iter+1] [difference]
	endif
	
	MUL32 [difference] [difference] [difference]
	
	ADD [iter/2] [difference] [iter/2]
endfor
COMPUTE_DONE
FLUSH

for (regfile = 0; regfile < 1; regfile+=1)
	COMPUTE_ALL [regfile]
endfor

INIT1 [const_two]
INC [const_two] [const_two]

INIT1 [x0_init]
for (iter = 0; iter < 8; iter += 1)
    LSHIFT [x0_init] [x0_init]
endfor

//for (iter = 0; iter < [total_data/2]; iter += 1)
for (iter = 0; iter < 1; iter += 1)
	INIT0 [mask_tmp]
	DEC [mask_tmp] [mask_tmp]

	MOV [x0_init] [x0_tmp]
	programmed_division([iter], [x0_tmp], [x1_tmp], [mask_tmp])
	ADD [x1_tmp] [x0_tmp] [x1_tmp]
	programmed_division([x1_tmp], [const_two], [x1_tmp], [mask_tmp])

	CMPST [x1_tmp] [x0_tmp]
	LFLUSH
	GETMASK [mask_tmp]

	.start_loop:
	// might need this to reset torus:
	GETMASK [mask_clear_throwaway]

	SETMASK [mask_tmp]

	// loop_body here 
	MOV [x1_tmp] [x0_tmp]
	programmed_division([iter], [x0_tmp], [x1_tmp], [mask_tmp])
	ADD [x1_tmp] [x0_tmp] [x1_tmp]
	programmed_division([x1_tmp], [const_two], [x1_tmp], [mask_tmp])
	// end loop body 
	UNMASK

	CMPST [x1_tmp] [x0_tmp]
	LFLUSH
	GETMASK [mask_tmp]

	CMPST [x1_tmp] [x0_tmp]
	LFLUSH
	INV_TORUS

	JUMP_COND .start_loop

	GETMASK [mask_clear_throwaway]

	// x0_tmp has the answer
	MOV [x0_tmp] [iter]
endfor 
COMPUTE_DONE
FLUSH
EOF
