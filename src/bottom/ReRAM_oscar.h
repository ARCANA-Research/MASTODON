#ifndef ReRAM_OSCAR_H
#define ReRAM_OSCAR_H

#include <vector>
#include <deque>
#include <map>
#include <utility>
#include <string>

/*
WARNING: this recipe book represents the "unrolled", fully translated, one-shot
recipes that are sent to the back end. In real hardware, the decoder can optionally
go through multiple level of indirection to build each recipe to save memory
space. For example, the MUL8 operation has 3 ADD operations at the end of the
recipe. In real hardware, the decoder will subsitute 3 ADD ops at the end
with the ADD recipes and the appropriate operands to create the unrolled MUL8
recipe. Another example, RDIV8 has a bunch of NOPs in its recipe. In reality, RDIV8
is a super instruction, composed of multiple internal instructions + FLUSH instructions
The FLUSH will replace the chain of NOP in real hardware.

In conclusion, this recipe book represents the final translation right before issuing
to the back end. It does not simulate the intermediate steps to create the recipes.
However, given the cycle-by-cycle translation of the recipe, those intermediate
steps won't create extra timing overhead even if we decide to simulate them.

TODO: Maybe in the future we need to simulate these intermediate steps
*/

using namespace std;

class ReRAM_OSCAR
{
public:
ReRAM_OSCAR(){};
map <string, deque<string> > get_recipe() {
map <string, deque<string> > table;
/* ====================== LSHIFT ============================= */
deque <string> lshift {{
"LOCK",
"BUF R i0",
"FILTER 0",
"COPY c0 i0",
"UNFILTER",
"BUF A L",
"COPY i0 B", // Allow A and B to be the same
"RELEASE"
}};
table.insert({"LSHIFT", lshift});

/* ====================== MOV ============================= */
deque <string> mov {{
"LOCK",
"NOP",
"NOP",
"COPY A B", // Allow A and B to be the same
"RELEASE"
}};
table.insert({"MOV", mov});

/* ====================== MSB_PRED ============================= */
deque <string> msb_pred {{
"LOCK",
"NOP", // not needed
"NOP", // not needed
"BUF A T",
"RELEASE"
}};
table.insert({"MSB_PRED", msb_pred});

/* ====================== INV_TORUS ============================= */
deque <string> inv_torus {{
"FILTER 0",
"BUF R i0",
"NOR i0 c0 i1",
"BUF i1 R",
"UNFILTER",
"NOP"
}};
table.insert({"INV_TORUS", inv_torus});

/* ====================== AND ============================= */
deque <string> binary_and {{
"LOCK",
"NOP",
"NOR A c0 i1",
"NOR B c0 i2",
"NOR i1 i2 i0",
"COPY i0 C", // in case C and A are the same
"RELEASE"
}};
table.insert({"AND", binary_and});

/* ====================== OR ============================= */
deque <string> binary_or {{
"LOCK",
"NOP",
"OR A B i0",
"COPY i0 C", // in case C and A are the same
"RELEASE"
}};
table.insert({"OR", binary_or});

/* ====================== NAND ============================= */
deque <string> binary_nand {{
"LOCK",
"NOP",
"NOR A c0 i1",
"NOR B c0 i2",
"NOR i1 i2 i3",
"NOR i3 c0 i0",
"COPY i0 C", // in case C and A are the same
"RELEASE"
}};
table.insert({"NAND", binary_nand});

/* ====================== NOR ============================= */
deque <string> binary_nor {{
"LOCK",
"NOP",
"NOR A B i0",
"COPY i0 C", // in case C and A are the same
"RELEASE"
}};
table.insert({"NOR", binary_nor});

/* ====================== XOR ============================= */
deque <string> binary_xor {{
"LOCK",
"NOP",
"NOR A B i1",
"NOR A i1 i2",
"NOR B i1 i3",
"NOR i2 i3 i4",
"NOR i4 c0 i0",
"COPY i0 C", // in case C and A are the same
"RELEASE"
}};
table.insert({"XOR", binary_xor});

/* ====================== XNOR ============================= */
deque <string> binary_xnor {{
"LOCK",
"NOP",
"NOR A B i1",
"NOR A i1 i2",
"NOR B i1 i3",
"NOR i2 i3 i4",
"NOR i4 c0 i0",
"NOR c0 i0 C", // in case C and A are the same
"RELEASE"
}};
table.insert({"XNOR", binary_xnor});

/* ====================== DINV ============================= */
deque <string> dinv {{
"LOCK",
"NOP",
"NOR A c0 i0",
"COPY i0 A",
"RELEASE"
}};
table.insert({"DINV", dinv});

/* ====================== INV ============================= */
deque <string> inv {{
"LOCK",
"NOP",
"NOP",
"NOR A c0 B",
"RELEASE"
}};
table.insert({"INV", inv});

/* ====================== INIT0 ============================= */
deque <string> init0 {{
"LOCK",
"NOP",
"NOP",
"COPY c0 A",
"RELEASE"
}};
table.insert({"INIT0", init0});

/* ====================== INIT1 ============================= */
deque <string> init1 {{
"LOCK",
"COPY c0 A",
"FILTER 0",
"COPY c1 A",
"UNFILTER",
"NOP",
"RELEASE"
}};
table.insert({"INIT1", init1});

/* ====================== INC ============================= */
// Increment by 1
deque <string> inc {{
"LOCK",
"BUF R i0",
"FILTER 0",
"COPY c1 i0",
"UNFILTER",
"NOR A i0 i3",
"NOR A i3 i4",
"NOR i0 i3 i5",
"NOR i4 i5 i6",
"NOR i6 c0 i1",
"NOR A c0 i3",
"NOR i0 c0 i4",
"NOR i3 i4 i2",
"COPY i1 B",
"BUF i2 L",
"RELEASE"
}};
table.insert({"INC", inc});

/* ====================== DEC ============================= */
// Decrement by 1
deque <string> dec {{
"LOCK",
"BUF R i0",
"FILTER 0",
"COPY c1 i0",
"UNFILTER",
"NOR A i0 i3",
"NOR A i3 i5",
"NOR i0 i3 i6",
"NOR i5 i6 i7",
"NOR i7 c0 i2",
"NOR c0 A i4",
"NOR i4 c0 i3",
"NOR i0 c0 i5",
"NOR i3 i5 i1",
"COPY i2 B",
"BUF i1 L",
"RELEASE"
}};
table.insert({"DEC", dec});

/* ====================== MUX ============================= */
deque <string> mux {{
"LOCK",
"COPY C i0",
"NOR c0 i0 i1",
"NOR A c0 i4",
"NOR i0 c0 i5",
"NOR i4 i5 i2",
"NOR B c0 i4",
"NOR i1 c0 i5",
"NOR i4 i5 i3",
"OR i2 i3 C",
"RELEASE"
}};
table.insert({"MUX", mux});

/* ====================== RELUv1 ============================= */
deque <string> reluv1 {{
"LOCK",
"BUF R i0",
"NOR A c0 i1",
"NOR i0 c0 i2",
"NOR i1 i2 B",
"NOR A c0 i1",
"NOR i0 c0 i2",
"NOR i1 i2 B",
"BUF i0 L",
"RELEASE"
}};
table.insert({"RELUv1", reluv1});

/* ====================== ADD ============================= */
deque <string> add {{
"LOCK",
"BUF R i0",
"NOR A B i4",
"NOR A i4 i5",
"NOR B i4 i6",
"NOR i5 i6 i7",
"NOR i7 c0 i1",
"NOR A c0 i4",
"NOR B c0 i5",
"NOR i4 i5 i2",
"NOR i1 i0 i4",
"NOR i1 i4 i5",
"NOR i0 i4 i6",
"NOR i5 i6 i7",
"NOR i7 c0 C",
"NOR i1 c0 i4",
"NOR i0 c0 i5",
"NOR i4 i5 i3",
"OR i2 i3 i1",
"BUF i1 L",
"RELEASE"
}};
table.insert({"ADD", add});

/* ====================== SUB ============================= */
// Full subtractor: A minus B
deque <string> sub {{
"LOCK",
"BUF R i0",
"NOR A B i5",
"NOR A i5 i6",
"NOR B i5 i7",
"NOR i6 i7 i8",
"NOR i8 c0 i1",
"NOR c0 A i2",
"NOR B c0 i5",
"NOR i2 c0 i6",
"NOR i5 i6 i3",
"NOR i1 i0 i5",
"NOR i1 i5 i6",
"NOR i0 i5 i7",
"NOR i6 i7 i8",
"NOR i8 c0 C",
"NOR c0 i1 i4",
"NOR i4 c0 i5",
"NOR i0 c0 i6",
"NOR i5 i6 i1",
"OR i3 i1 i4",
"BUF i4 L",
"RELEASE",
}};
table.insert({"SUB", sub});

/* ====================== MUL 8 ============================= */
// TODO c0 is substituting c0 right now, merge request from predicateExecute to use c0
// i0 - i5 are used to store the shifted version of inputs
// i7 - i10 are used to store partial products
// i6, i11 are used to perform AND with NOR
// At the end, i11 is used to store result of i7 + i8
// At the end, i6 is used to store result of i9 + i10
deque <string> mul8 {{
// Left shift A by 1
"LOCK",
"BUF R i0",
"BUF A L",
"RELEASE",
// Left shift A by 2
"LOCK",
"BUF R i1",
"BUF i0 L",
"RELEASE",
// Left shift A by 3
"LOCK",
"BUF R i2",
"BUF i1 L",
"RELEASE",
// Left shift B by 1
"LOCK",
"BUF R i3",
"BUF B L",
"RELEASE",
// Left shift B by 2
"LOCK",
"BUF R i4",
"BUF i3 L",
"RELEASE",
// Left shift B by 3
"LOCK",
"BUF R i5",
"BUF i4 L",
"RELEASE",
// Generate First Partial Product, store in i7
"NOR A c0 i12",
"NOR i5 c0 i13",
"NOR i12 i13 i7",
"FILTER 0",
"NOR A c0 i12",
"NOR B c0 i13",
"NOR i12 i13 i7",
"UNFILTER",
"FILTER 1",
"NOR A c0 i12",
"NOR i3 c0 i13",
"NOR i12 i13 i7",
"UNFILTER",
"FILTER 2",
"NOR A c0 i12",
"NOR i4 c0 i13",
"NOR i12 i13 i7",
"UNFILTER",
// Generate Second Partial Product, store in i8
"NOR i0 c0 i12",
"NOR i5 c0 i13",
"NOR i12 i13 i8",
"FILTER 1",
"NOR B c0 i12",
"NOR i0 c0 i13",
"NOR i12 i13 i8",
"UNFILTER",
"FILTER 2",
"NOR i0 c0 i12",
"NOR i3 c0 i13",
"NOR i12 i13 i8",
"UNFILTER",
"FILTER 3",
"NOR i0 c0 i12",
"NOR i4 c0 i13",
"NOR i12 i13 i8",
"UNFILTER",
// Generate Third Partial Product, store in i9
"NOR i1 c0 i12",
"NOR i5 c0 i13",
"NOR i12 i13 i9",
"FILTER 2",
"NOR i1 c0 i12",
"NOR B c0 i13",
"NOR i12 i13 i9",
"UNFILTER",
"FILTER 3",
"NOR i1 c0 i12",
"NOR i3 c0 i13",
"NOR i12 i13 i9",
"UNFILTER",
"FILTER 4",
"NOR i1 c0 i12",
"NOR i4 c0 i13",
"NOR i12 i13 i9",
"UNFILTER",
// Generate Fourth Partial Product, store in i10
"NOR i2 c0 i12",
"NOR i5 c0 i13",
"NOR i12 i13 i10",
"FILTER 3",
"NOR B c0 i12",
"NOR i2 c0 i13",
"NOR i12 i13 i10",
"UNFILTER",
"FILTER 4",
"NOR i2 c0 i12",
"NOR i3 c0 i13",
"NOR i12 i13 i10",
"UNFILTER",
"FILTER 5",
"NOR i2 c0 i12",
"NOR i4 c0 i13",
"NOR i12 i13 i10",
"UNFILTER",
// Add i7 to i8 store i11
"LOCK",
"BUF R i0",
"NOR i7 i8 i12",
"NOR i7 i12 i13",
"NOR i8 i12 i14",
"NOR i13 i14 i15",
"NOR i15 c0 i1",
"NOR i1 i0 i12",
"NOR i1 i12 i13",
"NOR i0 i12 i14",
"NOR i13 i14 i15",
"NOR i15 c0 i11",
"NOR i7 c0 i12",
"NOR i8 c0 i13",
"NOR i12 i13 i2",
"NOR i1 c0 i12",
"NOR i0 c0 i13",
"NOR i12 i13 i3",
"OR i2 i3 i1",
"BUF i1 L",
"RELEASE",
// Add i9 to i10 store i6
"LOCK",
"BUF R i0",
"NOR i9 i10 i12",
"NOR i9 i12 i13",
"NOR i10 i12 i14",
"NOR i13 i14 i15",
"NOR i15 c0 i1",
"NOR i1 i0 i12",
"NOR i1 i12 i13",
"NOR i0 i12 i14",
"NOR i13 i14 i15",
"NOR i15 c0 i6",
"NOR i9 c0 i12",
"NOR i10 c0 i13",
"NOR i12 i13 i2",
"NOR i1 c0 i12",
"NOR i0 c0 i13",
"NOR i12 i13 i3",
"OR i2 i3 i1",
"BUF i1 L",
"RELEASE",
// ADD i11 to i6 store in C
"LOCK",
"BUF R i0",
"NOR i11 i6 i12",
"NOR i11 i12 i13",
"NOR i6 i12 i14",
"NOR i13 i14 i15",
"NOR i15 c0 i1",
"NOR i1 i0 i12",
"NOR i1 i12 i13",
"NOR i0 i12 i14",
"NOR i13 i14 i15",
"NOR i15 c0 C",
"NOR i11 c0 i12",
"NOR i6 c0 i13",
"NOR i12 i13 i2",
"NOR i1 c0 i12",
"NOR i0 c0 i13",
"NOR i12 i13 i3",
"OR i2 i3 i1",
"BUF i1 L",
"RELEASE"
}};
table.insert({"MUL8", mul8});

/* ====================== MAC 8 ============================= */
// TODO c0 is substituting c0 right now, merge request from predicateExecute to use c0
// i0 - i5 are used to store the shifted version of inputs
// i7 - i10 are used to store partial products
// i6, i11 are used to perform AND with NOR
// At the end, i11 is used to store result of i7 + i8
// At the end, i6 is used to store result of i9 + i10
deque <string> mac8 {{
// Left shift A by 1
"LOCK",
"BUF R i0",
"BUF A L",
"RELEASE",
// Left shift A by 2
"LOCK",
"BUF R i1",
"BUF i0 L",
"RELEASE",
// Left shift A by 3
"LOCK",
"BUF R i2",
"BUF i1 L",
"RELEASE",
// Left shift B by 1
"LOCK",
"BUF R i3",
"BUF B L",
"RELEASE",
// Left shift B by 2
"LOCK",
"BUF R i4",
"BUF i3 L",
"RELEASE",
// Left shift B by 3
"LOCK",
"BUF R i5",
"BUF i4 L",
"RELEASE",
// Generate First Partial Product, store in i7
"NOR A c0 i13",
"NOR i5 c0 i14",
"NOR i13 i14 i7",
"FILTER 0",
"NOR A c0 i13",
"NOR B c0 i14",
"NOR i13 i14 i7",
"UNFILTER",
"FILTER 1",
"NOR A c0 i13",
"NOR i3 c0 i14",
"NOR i13 i14 i7",
"UNFILTER",
"FILTER 2",
"NOR A c0 i13",
"NOR i4 c0 i14",
"NOR i13 i14 i7",
"UNFILTER",
// Generate Second Partial Product, store in i8
"NOR i0 c0 i13",
"NOR i5 c0 i14",
"NOR i13 i14 i8",
"FILTER 1",
"NOR B c0 i13",
"NOR i0 c0 i14",
"NOR i13 i14 i8",
"UNFILTER",
"FILTER 2",
"NOR i0 c0 i13",
"NOR i3 c0 i14",
"NOR i13 i14 i8",
"UNFILTER",
"FILTER 3",
"NOR i0 c0 i13",
"NOR i4 c0 i14",
"NOR i13 i14 i8",
"UNFILTER",
// Generate Third Partial Product, store in i9
"NOR i1 c0 i13",
"NOR i5 c0 i14",
"NOR i13 i14 i9",
"FILTER 2",
"NOR i1 c0 i13",
"NOR B c0 i14",
"NOR i13 i14 i9",
"UNFILTER",
"FILTER 3",
"NOR i1 c0 i13",
"NOR i3 c0 i14",
"NOR i13 i14 i9",
"UNFILTER",
"FILTER 4",
"NOR i1 c0 i13",
"NOR i4 c0 i14",
"NOR i13 i14 i9",
"UNFILTER",
// Generate Fourth Partial Product, store in i10
"NOR i2 c0 i13",
"NOR i5 c0 i14",
"NOR i13 i14 i10",
"FILTER 3",
"NOR B c0 i13",
"NOR i2 c0 i14",
"NOR i13 i14 i10",
"UNFILTER",
"FILTER 4",
"NOR i2 c0 i13",
"NOR i3 c0 i14",
"NOR i13 i14 i10",
"UNFILTER",
"FILTER 5",
"NOR i2 c0 i13",
"NOR i4 c0 i14",
"NOR i13 i14 i10",
"UNFILTER",
// Add i7 to C store i11
"LOCK",
"BUF R i0",
"NOR i7 C i13",
"NOR i7 i13 i14",
"NOR C i13 i15",
"NOR i14 i15 i16",
"NOR i16 c0 i1",
"NOR i1 i0 i13",
"NOR i1 i13 i14",
"NOR i0 i13 i15",
"NOR i14 i15 i16",
"NOR i16 c0 i11",
"NOR i7 c0 i13",
"NOR C c0 i14",
"NOR i13 i14 i2",
"NOR i1 c0 i13",
"NOR i0 c0 i14",
"NOR i13 i14 i3",
"OR i2 i3 i1",
"BUF i1 L",
"RELEASE",
// Add i11 to i8 store i12
"LOCK",
"BUF R i0",
"NOR i11 i8 i13",
"NOR i11 i13 i14",
"NOR i8 i13 i15",
"NOR i14 i15 i16",
"NOR i16 c0 i1",
"NOR i1 i0 i13",
"NOR i1 i13 i14",
"NOR i0 i13 i15",
"NOR i14 i15 i16",
"NOR i16 c0 i12",
"NOR i11 c0 i13",
"NOR i8 c0 i14",
"NOR i13 i14 i2",
"NOR i1 c0 i13",
"NOR i0 c0 i14",
"NOR i13 i14 i3",
"OR i2 i3 i1",
"BUF i1 L",
"RELEASE",
// Add i9 to i10 store i6
"LOCK",
"BUF R i0",
"NOR i9 i10 i13",
"NOR i9 i13 i14",
"NOR i10 i13 i15",
"NOR i14 i15 i16",
"NOR i16 c0 i1",
"NOR i1 i0 i13",
"NOR i1 i13 i14",
"NOR i0 i13 i15",
"NOR i14 i15 i16",
"NOR i16 c0 i6",
"NOR i9 c0 i13",
"NOR i10 c0 i14",
"NOR i13 i14 i2",
"NOR i1 c0 i13",
"NOR i0 c0 i14",
"NOR i13 i14 i3",
"OR i2 i3 i1",
"BUF i1 L",
"RELEASE",
// ADD i12 to i6 store in C
"LOCK",
"BUF R i0",
"NOR i12 i6 i13",
"NOR i12 i13 i14",
"NOR i6 i13 i15",
"NOR i14 i15 i16",
"NOR i16 c0 i1",
"NOR i1 i0 i13",
"NOR i1 i13 i14",
"NOR i0 i13 i15",
"NOR i14 i15 i16",
"NOR i16 c0 C",
"NOR i12 c0 i13",
"NOR i6 c0 i14",
"NOR i13 i14 i2",
"NOR i1 c0 i13",
"NOR i0 c0 i14",
"NOR i13 i14 i3",
"OR i2 i3 i1",
"BUF i1 L",
"RELEASE"
}};
table.insert({"MAC8", mac8});

/* ====================== MUL 16 ============================= */
// TODO c0 is substituting c0 right now, merge request from predicateExecute to use c0
// i0 - i5 are used to store the shifted version of inputs
// i7 - i10 are used to store partial products
// i6, i11 are used to perform AND with NOR
// At the end, i11 is used to store result of i7 + i8
// At the end, i6 is used to store result of i9 + i10
deque <string> mul16 {{
// Left shift A by 1
"LOCK",
"BUF R i0",
"BUF A L",
"RELEASE",
// Left shift A by 2
"LOCK",
"BUF R i1",
"BUF i0 L",
"RELEASE",
// Left shift A by 3
"LOCK",
"BUF R i2",
"BUF i1 L",
"RELEASE",
// Left shift A by 4
"LOCK",
"BUF R i3",
"BUF i2 L",
"RELEASE",
// Left shift A by 5
"LOCK",
"BUF R i4",
"BUF i3 L",
"RELEASE",
// Left shift A by 6
"LOCK",
"BUF R i5",
"BUF i4 L",
"RELEASE",
// Left shift A by 7
"LOCK",
"BUF R i6",
"BUF i5 L",
"RELEASE",
// Left shift B by 1
"LOCK",
"BUF R i7",
"BUF B L",
"RELEASE",
// Left shift B by 2
"LOCK",
"BUF R i8",
"BUF i7 L",
"RELEASE",
// Left shift B by 3
"LOCK",
"BUF R i9",
"BUF i8 L",
"RELEASE",
// Left shift B by 4
"LOCK",
"BUF R i10",
"BUF i9 L",
"RELEASE",
// Left shift B by 5
"LOCK",
"BUF R i11",
"BUF i10 L",
"RELEASE",
// Left shift B by 6
"LOCK",
"BUF R i12",
"BUF i11 L",
"RELEASE",
// Left shift B by 7
"LOCK",
"BUF R i13",
"BUF i12 L",
"RELEASE",
// Generate First Partial Product, store in i14
"NOR A c0 i22",
"NOR i13 c0 i23",
"NOR i22 i23 i14",
"FILTER 0",
"NOR A c0 i22",
"NOR B c0 i23",
"NOR i22 i23 i14",
"UNFILTER",
"FILTER 1",
"NOR A c0 i22",
"NOR i7 c0 i23",
"NOR i22 i23 i14",
"UNFILTER",
"FILTER 2",
"NOR A c0 i22",
"NOR i8 c0 i23",
"NOR i22 i23 i14",
"UNFILTER",
"FILTER 3",
"NOR A c0 i22",
"NOR i9 c0 i23",
"NOR i22 i23 i14",
"UNFILTER",
"FILTER 4",
"NOR A c0 i22",
"NOR i10 c0 i23",
"NOR i22 i23 i14",
"UNFILTER",
"FILTER 5",
"NOR A c0 i22",
"NOR i11 c0 i23",
"NOR i22 i23 i14",
"UNFILTER",
"FILTER 6",
"NOR A c0 i22",
"NOR i12 c0 i23",
"NOR i22 i23 i14",
"UNFILTER",
// Generate Second Partial Product, store in i15
"NOR i0 c0 i22",
"NOR i13 c0 i23",
"NOR i22 i23 i15",
"FILTER 1",
"NOR i0 c0 i22",
"NOR B c0 i23",
"NOR i22 i23 i15",
"UNFILTER",
"FILTER 2",
"NOR i0 c0 i22",
"NOR i7 c0 i23",
"NOR i22 i23 i15",
"UNFILTER",
"FILTER 3",
"NOR i0 c0 i22",
"NOR i8 c0 i23",
"NOR i22 i23 i15",
"UNFILTER",
"FILTER 4",
"NOR i0 c0 i22",
"NOR i9 c0 i23",
"NOR i22 i23 i15",
"UNFILTER",
"FILTER 5",
"NOR i0 c0 i22",
"NOR i10 c0 i23",
"NOR i22 i23 i15",
"UNFILTER",
"FILTER 6",
"NOR i0 c0 i22",
"NOR i11 c0 i23",
"NOR i22 i23 i15",
"UNFILTER",
"FILTER 7",
"NOR i0 c0 i22",
"NOR i12 c0 i23",
"NOR i22 i23 i15",
"UNFILTER",
// Generate Third Partial Product, store in i16
"NOR i1 c0 i22",
"NOR i13 c0 i23",
"NOR i22 i23 i16",
"FILTER 2",
"NOR i1 c0 i22",
"NOR B c0 i23",
"NOR i22 i23 i16",
"UNFILTER",
"FILTER 3",
"NOR i1 c0 i22",
"NOR i7 c0 i23",
"NOR i22 i23 i16",
"UNFILTER",
"FILTER 4",
"NOR i1 c0 i22",
"NOR i8 c0 i23",
"NOR i22 i23 i16",
"UNFILTER",
"FILTER 5",
"NOR i1 c0 i22",
"NOR i9 c0 i23",
"NOR i22 i23 i16",
"UNFILTER",
"FILTER 6",
"NOR i1 c0 i22",
"NOR i10 c0 i23",
"NOR i22 i23 i16",
"UNFILTER",
"FILTER 7",
"NOR i1 c0 i22",
"NOR i11 c0 i23",
"NOR i22 i23 i16",
"UNFILTER",
"FILTER 8",
"NOR i1 c0 i22",
"NOR i12 c0 i23",
"NOR i22 i23 i16",
"UNFILTER",
// Generate Fourth Partial Product, store in i17
"NOR i2 c0 i22",
"NOR i13 c0 i23",
"NOR i22 i23 i17",
"FILTER 3",
"NOR i2 c0 i22",
"NOR B c0 i23",
"NOR i22 i23 i17",
"UNFILTER",
"FILTER 4",
"NOR i2 c0 i22",
"NOR i7 c0 i23",
"NOR i22 i23 i17",
"UNFILTER",
"FILTER 5",
"NOR i2 c0 i22",
"NOR i8 c0 i23",
"NOR i22 i23 i17",
"UNFILTER",
"FILTER 6",
"NOR i2 c0 i22",
"NOR i9 c0 i23",
"NOR i22 i23 i17",
"UNFILTER",
"FILTER 7",
"NOR i2 c0 i22",
"NOR i10 c0 i23",
"NOR i22 i23 i17",
"UNFILTER",
"FILTER 8",
"NOR i2 c0 i22",
"NOR i11 c0 i23",
"NOR i22 i23 i17",
"UNFILTER",
"FILTER 9",
"NOR i2 c0 i22",
"NOR i12 c0 i23",
"NOR i22 i23 i17",
"UNFILTER",
// Generate Fifth Partial Product, store in i18
"NOR i3 c0 i22",
"NOR i13 c0 i23",
"NOR i22 i23 i18",
"FILTER 4",
"NOR i3 c0 i22",
"NOR B c0 i23",
"NOR i22 i23 i18",
"UNFILTER",
"FILTER 5",
"NOR i3 c0 i22",
"NOR i7 c0 i23",
"NOR i22 i23 i18",
"UNFILTER",
"FILTER 6",
"NOR i3 c0 i22",
"NOR i8 c0 i23",
"NOR i22 i23 i18",
"UNFILTER",
"FILTER 7",
"NOR i3 c0 i22",
"NOR i9 c0 i23",
"NOR i22 i23 i18",
"UNFILTER",
"FILTER 8",
"NOR i3 c0 i22",
"NOR i10 c0 i23",
"NOR i22 i23 i18",
"UNFILTER",
"FILTER 9",
"NOR i3 c0 i22",
"NOR i11 c0 i23",
"NOR i22 i23 i18",
"UNFILTER",
"FILTER 10",
"NOR i3 c0 i22",
"NOR i12 c0 i23",
"NOR i22 i23 i18",
"UNFILTER",
// Generate Sixth Partial Product, store in i19
"NOR i4 c0 i22",
"NOR i13 c0 i23",
"NOR i22 i23 i19",
"FILTER 5",
"NOR i4 c0 i22",
"NOR B c0 i23",
"NOR i22 i23 i19",
"UNFILTER",
"FILTER 6",
"NOR i4 c0 i22",
"NOR i7 c0 i23",
"NOR i22 i23 i19",
"UNFILTER",
"FILTER 7",
"NOR i4 c0 i22",
"NOR i8 c0 i23",
"NOR i22 i23 i19",
"UNFILTER",
"FILTER 8",
"NOR i4 c0 i22",
"NOR i9 c0 i23",
"NOR i22 i23 i19",
"UNFILTER",
"FILTER 9",
"NOR i4 c0 i22",
"NOR i10 c0 i23",
"NOR i22 i23 i19",
"UNFILTER",
"FILTER 10",
"NOR i4 c0 i22",
"NOR i11 c0 i23",
"NOR i22 i23 i19",
"UNFILTER",
"FILTER 11",
"NOR i4 c0 i22",
"NOR i12 c0 i23",
"NOR i22 i23 i19",
"UNFILTER",
// Generate Seventh Partial Product, store in i20
"NOR i5 c0 i22",
"NOR i13 c0 i23",
"NOR i22 i23 i20",
"FILTER 6",
"NOR i5 c0 i22",
"NOR B c0 i23",
"NOR i22 i23 i20",
"UNFILTER",
"FILTER 7",
"NOR i5 c0 i22",
"NOR i7 c0 i23",
"NOR i22 i23 i20",
"UNFILTER",
"FILTER 8",
"NOR i5 c0 i22",
"NOR i8 c0 i23",
"NOR i22 i23 i20",
"UNFILTER",
"FILTER 9",
"NOR i5 c0 i22",
"NOR i9 c0 i23",
"NOR i22 i23 i20",
"UNFILTER",
"FILTER 10",
"NOR i5 c0 i22",
"NOR i10 c0 i23",
"NOR i22 i23 i20",
"UNFILTER",
"FILTER 11",
"NOR i5 c0 i22",
"NOR i11 c0 i23",
"NOR i22 i23 i20",
"UNFILTER",
"FILTER 12",
"NOR i5 c0 i22",
"NOR i12 c0 i23",
"NOR i22 i23 i20",
"UNFILTER",
// Generate Eigth Partial Product, store in i21
"NOR i6 c0 i22",
"NOR i13 c0 i23",
"NOR i22 i23 i21",
"FILTER 7",
"NOR i6 c0 i22",
"NOR B c0 i23",
"NOR i22 i23 i21",
"UNFILTER",
"FILTER 8",
"NOR i6 c0 i22",
"NOR i7 c0 i23",
"NOR i22 i23 i21",
"UNFILTER",
"FILTER 9",
"NOR i6 c0 i22",
"NOR i8 c0 i23",
"NOR i22 i23 i21",
"UNFILTER",
"FILTER 10",
"NOR i6 c0 i22",
"NOR i9 c0 i23",
"NOR i22 i23 i21",
"UNFILTER",
"FILTER 11",
"NOR i6 c0 i22",
"NOR i10 c0 i23",
"NOR i22 i23 i21",
"UNFILTER",
"FILTER 12",
"NOR i6 c0 i22",
"NOR i11 c0 i23",
"NOR i22 i23 i21",
"UNFILTER",
"FILTER 13",
"NOR i6 c0 i22",
"NOR i12 c0 i23",
"NOR i22 i23 i21",
"UNFILTER",
// Add i14 to i15 store i14
"LOCK",
"BUF R i0",
"NOR i14 i15 i22",
"NOR i14 i22 i23",
"NOR i15 i22 i24",
"NOR i23 i24 i25",
"NOR i25 c0 i1",
"NOR i14 c0 i22",
"NOR i15 c0 i23",
"NOR i22 i23 i2",
"NOR i1 i0 i22",
"NOR i1 i22 i23",
"NOR i0 i22 i24",
"NOR i23 i24 i25",
"NOR i25 c0 i14",
"NOR i1 c0 i22",
"NOR i0 c0 i23",
"NOR i22 i23 i3",
"OR i2 i3 i1",
"BUF i1 L",
"RELEASE",
// Add i16 to i17 store i16
"LOCK",
"BUF R i0",
"NOR i16 i17 i22",
"NOR i16 i22 i23",
"NOR i17 i22 i24",
"NOR i23 i24 i25",
"NOR i25 c0 i1",
"NOR i16 c0 i22",
"NOR i17 c0 i23",
"NOR i22 i23 i2",
"NOR i1 i0 i22",
"NOR i1 i22 i23",
"NOR i0 i22 i24",
"NOR i23 i24 i25",
"NOR i25 c0 i16",
"NOR i1 c0 i22",
"NOR i0 c0 i23",
"NOR i22 i23 i3",
"OR i2 i3 i1",
"BUF i1 L",
"RELEASE",
// Add i18 to i19 store i18
"LOCK",
"BUF R i0",
"NOR i18 i19 i22",
"NOR i18 i22 i23",
"NOR i19 i22 i24",
"NOR i23 i24 i25",
"NOR i25 c0 i1",
"NOR i18 c0 i22",
"NOR i19 c0 i23",
"NOR i22 i23 i2",
"NOR i1 i0 i22",
"NOR i1 i22 i23",
"NOR i0 i22 i24",
"NOR i23 i24 i25",
"NOR i25 c0 i18",
"NOR i1 c0 i22",
"NOR i0 c0 i23",
"NOR i22 i23 i3",
"OR i2 i3 i1",
"BUF i1 L",
"RELEASE",
// Add i20 to i21 store i20
"LOCK",
"BUF R i0",
"NOR i20 i21 i22",
"NOR i20 i22 i23",
"NOR i21 i22 i24",
"NOR i23 i24 i25",
"NOR i25 c0 i1",
"NOR i20 c0 i22",
"NOR i21 c0 i23",
"NOR i22 i23 i2",
"NOR i1 i0 i22",
"NOR i1 i22 i23",
"NOR i0 i22 i24",
"NOR i23 i24 i25",
"NOR i25 c0 i20",
"NOR i1 c0 i22",
"NOR i0 c0 i23",
"NOR i22 i23 i3",
"OR i2 i3 i1",
"BUF i1 L",
"RELEASE",


// Add i14 to i16 store i14
"LOCK",
"BUF R i0",
"NOR i14 i16 i22",
"NOR i14 i22 i23",
"NOR i16 i22 i24",
"NOR i23 i24 i25",
"NOR i25 c0 i1",
"NOR i14 c0 i22",
"NOR i16 c0 i23",
"NOR i22 i23 i2",
"NOR i1 i0 i22",
"NOR i1 i22 i23",
"NOR i0 i22 i24",
"NOR i23 i24 i25",
"NOR i25 c0 i14",
"NOR i1 c0 i22",
"NOR i0 c0 i23",
"NOR i22 i23 i3",
"OR i2 i3 i1",
"BUF i1 L",
"RELEASE",
// Add i18 to i20 store i18
"LOCK",
"BUF R i0",
"NOR i18 i20 i22",
"NOR i18 i22 i23",
"NOR i20 i22 i24",
"NOR i23 i24 i25",
"NOR i25 c0 i1",
"NOR i18 c0 i22",
"NOR i20 c0 i23",
"NOR i22 i23 i2",
"NOR i1 i0 i22",
"NOR i1 i22 i23",
"NOR i0 i22 i24",
"NOR i23 i24 i25",
"NOR i25 c0 i18",
"NOR i1 c0 i22",
"NOR i0 c0 i23",
"NOR i22 i23 i3",
"OR i2 i3 i1",
"BUF i1 L",
"RELEASE",


// Final Add
"LOCK",
"BUF R i0",
"NOR i14 i18 i22",
"NOR i14 i22 i23",
"NOR i18 i22 i24",
"NOR i23 i24 i25",
"NOR i25 c0 i1",
"NOR i14 c0 i22",
"NOR i18 c0 i23",
"NOR i22 i23 i2",
"NOR i1 i0 i22",
"NOR i1 i22 i23",
"NOR i0 i22 i24",
"NOR i23 i24 i25",
"NOR i25 c0 C",
"NOR i1 c0 i22",
"NOR i0 c0 i23",
"NOR i22 i23 i3",
"OR i2 i3 i1",
"BUF i1 L",
"RELEASE"
}};
table.insert({"MUL16", mul16});

/* ====================== MUL 32 ============================= */
// TODO c0 is substituting c0 right now, merge request from predicateExecute to use c0
// i0 - i5 are used to store the shifted version of inputs
// i7 - i10 are used to store partial products
// i6, i11 are used to perform AND with NOR
// At the end, i11 is used to store result of i7 + i8
// At the end, i6 is used to store result of i9 + i10
deque <string> mul32 {{
// Left shift A by 1
"LOCK",
"BUF R i0",
"BUF A L",
"RELEASE",
// Left shift A by 2
"LOCK",
"BUF R i1",
"BUF i0 L",
"RELEASE",
// Left shift A by 3
"LOCK",
"BUF R i2",
"BUF i1 L",
"RELEASE",
// Left shift A by 4
"LOCK",
"BUF R i3",
"BUF i2 L",
"RELEASE",
// Left shift A by 5
"LOCK",
"BUF R i4",
"BUF i3 L",
"RELEASE",
// Left shift A by 6
"LOCK",
"BUF R i5",
"BUF i4 L",
"RELEASE",
// Left shift A by 7
"LOCK",
"BUF R i6",
"BUF i5 L",
"RELEASE",
// Left shift A by 8
"LOCK",
"BUF R i7",
"BUF i6 L",
"RELEASE",
// Left shift A by 9
"LOCK",
"BUF R i8",
"BUF i7 L",
"RELEASE",
// Left shift A by 10
"LOCK",
"BUF R i9",
"BUF i8 L",
"RELEASE",
// Left shift A by 11
"LOCK",
"BUF R i10",
"BUF i9 L",
"RELEASE",
// Left shift A by 12
"LOCK",
"BUF R i11",
"BUF i10 L",
"RELEASE",
// Left shift A by 13
"LOCK",
"BUF R i12",
"BUF i11 L",
"RELEASE",
// Left shift A by 14
"LOCK",
"BUF R i13",
"BUF i12 L",
"RELEASE",
// Left shift A by 15
"LOCK",
"BUF R i14",
"BUF i13 L",
"RELEASE",
// Left shift B by 1
"LOCK",
"BUF R i15",
"BUF B L",
"RELEASE",
// Left shift B by 2
"LOCK",
"BUF R i16",
"BUF i15 L",
"RELEASE",
// Left shift B by 3
"LOCK",
"BUF R i17",
"BUF i16 L",
"RELEASE",
// Left shift B by 4
"LOCK",
"BUF R i18",
"BUF i17 L",
"RELEASE",
// Left shift B by 5
"LOCK",
"BUF R i19",
"BUF i18 L",
"RELEASE",
// Left shift B by 6
"LOCK",
"BUF R i20",
"BUF i19 L",
"RELEASE",
// Left shift B by 7
"LOCK",
"BUF R i21",
"BUF i20 L",
"RELEASE",
// Left shift B by 8
"LOCK",
"BUF R i22",
"BUF i21 L",
"RELEASE",
// Left shift B by 9
"LOCK",
"BUF R i23",
"BUF i22 L",
"RELEASE",
// Left shift B by 10
"LOCK",
"BUF R i24",
"BUF i23 L",
"RELEASE",
// Left shift B by 11
"LOCK",
"BUF R i25",
"BUF i24 L",
"RELEASE",
// Left shift B by 12
"LOCK",
"BUF R i26",
"BUF i25 L",
"RELEASE",
// Left shift B by 13
"LOCK",
"BUF R i27",
"BUF i26 L",
"RELEASE",
// Left shift B by 14
"LOCK",
"BUF R i28",
"BUF i27 L",
"RELEASE",
// Left shift B by 15
"LOCK",
"BUF R i29",
"BUF i28 L",
"RELEASE",
// Generate 1st Partial Product, store in i30
"NOR i14 c0 i46",
"NOR B c0 i47",
"NOR i46 i47 i30",
"FILTER 0",
"NOR A c0 i46",
"NOR B c0 i47",
"NOR i46 i47 i30",
"UNFILTER",
"FILTER 1",
"NOR i0 c0 i46",
"NOR B c0 i47",
"NOR i46 i47 i30",
"UNFILTER",
"FILTER 2",
"NOR i1 c0 i46",
"NOR B c0 i47",
"NOR i46 i47 i30",
"UNFILTER",
"FILTER 3",
"NOR i2 c0 i46",
"NOR B c0 i47",
"NOR i46 i47 i30",
"UNFILTER",
"FILTER 4",
"NOR i3 c0 i46",
"NOR B c0 i47",
"NOR i46 i47 i30",
"UNFILTER",
"FILTER 5",
"NOR i4 c0 i46",
"NOR B c0 i47",
"NOR i46 i47 i30",
"UNFILTER",
"FILTER 6",
"NOR i5 c0 i46",
"NOR B c0 i47",
"NOR i46 i47 i30",
"UNFILTER",
"FILTER 7",
"NOR i6 c0 i46",
"NOR B c0 i47",
"NOR i46 i47 i30",
"UNFILTER",
"FILTER 8",
"NOR i7 c0 i46",
"NOR B c0 i47",
"NOR i46 i47 i30",
"UNFILTER",
"FILTER 9",
"NOR i8 c0 i46",
"NOR B c0 i47",
"NOR i46 i47 i30",
"UNFILTER",
"FILTER 10",
"NOR i9 c0 i46",
"NOR B c0 i47",
"NOR i46 i47 i30",
"UNFILTER",
"FILTER 11",
"NOR i10 c0 i46",
"NOR B c0 i47",
"NOR i46 i47 i30",
"UNFILTER",
"FILTER 12",
"NOR i11 c0 i46",
"NOR B c0 i47",
"NOR i46 i47 i30",
"UNFILTER",
"FILTER 13",
"NOR i12 c0 i46",
"NOR B c0 i47",
"NOR i46 i47 i30",
"UNFILTER",
"FILTER 14",
"NOR i13 c0 i46",
"NOR B c0 i47",
"NOR i46 i47 i30",
"UNFILTER",
// Generate 2nd Partial Product, store in i31
"NOR i14 c0 i46",
"NOR i15 c0 i47",
"NOR i46 i47 i31",
"FILTER 1",
"NOR A c0 i46",
"NOR i15 c0 i47",
"NOR i46 i47 i31",
"UNFILTER",
"FILTER 2",
"NOR i0 c0 i46",
"NOR i15 c0 i47",
"NOR i46 i47 i31",
"UNFILTER",
"FILTER 3",
"NOR i1 c0 i46",
"NOR i15 c0 i47",
"NOR i46 i47 i31",
"UNFILTER",
"FILTER 4",
"NOR i2 c0 i46",
"NOR i15 c0 i47",
"NOR i46 i47 i31",
"UNFILTER",
"FILTER 5",
"NOR i3 c0 i46",
"NOR i15 c0 i47",
"NOR i46 i47 i31",
"UNFILTER",
"FILTER 6",
"NOR i4 c0 i46",
"NOR i15 c0 i47",
"NOR i46 i47 i31",
"UNFILTER",
"FILTER 7",
"NOR i5 c0 i46",
"NOR i15 c0 i47",
"NOR i46 i47 i31",
"UNFILTER",
"FILTER 8",
"NOR i6 c0 i46",
"NOR i15 c0 i47",
"NOR i46 i47 i31",
"UNFILTER",
"FILTER 9",
"NOR i7 c0 i46",
"NOR i15 c0 i47",
"NOR i46 i47 i31",
"UNFILTER",
"FILTER 10",
"NOR i8 c0 i46",
"NOR i15 c0 i47",
"NOR i46 i47 i31",
"UNFILTER",
"FILTER 11",
"NOR i9 c0 i46",
"NOR i15 c0 i47",
"NOR i46 i47 i31",
"UNFILTER",
"FILTER 12",
"NOR i10 c0 i46",
"NOR i15 c0 i47",
"NOR i46 i47 i31",
"UNFILTER",
"FILTER 13",
"NOR i11 c0 i46",
"NOR i15 c0 i47",
"NOR i46 i47 i31",
"UNFILTER",
"FILTER 14",
"NOR i12 c0 i46",
"NOR i15 c0 i47",
"NOR i46 i47 i31",
"UNFILTER",
"FILTER 15",
"NOR i13 c0 i46",
"NOR i15 c0 i47",
"NOR i46 i47 i31",
"UNFILTER",
// Generate 3(th) Partial Product
"NOR i14 c0 i46",
"NOR i16 c0 i47",
"NOR i46 i47 i32",
"FILTER 2",
"NOR A c0 i46",
"NOR i16 c0 i47",
"NOR i46 i47 i32",
"UNFILTER",
"FILTER 3",
"NOR i0 c0 i46",
"NOR i16 c0 i47",
"NOR i46 i47 i32",
"UNFILTER",
"FILTER 4",
"NOR i1 c0 i46",
"NOR i16 c0 i47",
"NOR i46 i47 i32",
"UNFILTER",
"FILTER 5",
"NOR i2 c0 i46",
"NOR i16 c0 i47",
"NOR i46 i47 i32",
"UNFILTER",
"FILTER 6",
"NOR i3 c0 i46",
"NOR i16 c0 i47",
"NOR i46 i47 i32",
"UNFILTER",
"FILTER 7",
"NOR i4 c0 i46",
"NOR i16 c0 i47",
"NOR i46 i47 i32",
"UNFILTER",
"FILTER 8",
"NOR i5 c0 i46",
"NOR i16 c0 i47",
"NOR i46 i47 i32",
"UNFILTER",
"FILTER 9",
"NOR i6 c0 i46",
"NOR i16 c0 i47",
"NOR i46 i47 i32",
"UNFILTER",
"FILTER 10",
"NOR i7 c0 i46",
"NOR i16 c0 i47",
"NOR i46 i47 i32",
"UNFILTER",
"FILTER 11",
"NOR i8 c0 i46",
"NOR i16 c0 i47",
"NOR i46 i47 i32",
"UNFILTER",
"FILTER 12",
"NOR i9 c0 i46",
"NOR i16 c0 i47",
"NOR i46 i47 i32",
"UNFILTER",
"FILTER 13",
"NOR i10 c0 i46",
"NOR i16 c0 i47",
"NOR i46 i47 i32",
"UNFILTER",
"FILTER 14",
"NOR i11 c0 i46",
"NOR i16 c0 i47",
"NOR i46 i47 i32",
"UNFILTER",
"FILTER 15",
"NOR i12 c0 i46",
"NOR i16 c0 i47",
"NOR i46 i47 i32",
"UNFILTER",
"FILTER 16",
"NOR i13 c0 i46",
"NOR i16 c0 i47",
"NOR i46 i47 i32",
"UNFILTER",
// Generate 4(th) Partial Product
"NOR i14 c0 i46",
"NOR i17 c0 i47",
"NOR i46 i47 i33",
"FILTER 3",
"NOR A c0 i46",
"NOR i17 c0 i47",
"NOR i46 i47 i33",
"UNFILTER",
"FILTER 4",
"NOR i0 c0 i46",
"NOR i17 c0 i47",
"NOR i46 i47 i33",
"UNFILTER",
"FILTER 5",
"NOR i1 c0 i46",
"NOR i17 c0 i47",
"NOR i46 i47 i33",
"UNFILTER",
"FILTER 6",
"NOR i2 c0 i46",
"NOR i17 c0 i47",
"NOR i46 i47 i33",
"UNFILTER",
"FILTER 7",
"NOR i3 c0 i46",
"NOR i17 c0 i47",
"NOR i46 i47 i33",
"UNFILTER",
"FILTER 8",
"NOR i4 c0 i46",
"NOR i17 c0 i47",
"NOR i46 i47 i33",
"UNFILTER",
"FILTER 9",
"NOR i5 c0 i46",
"NOR i17 c0 i47",
"NOR i46 i47 i33",
"UNFILTER",
"FILTER 10",
"NOR i6 c0 i46",
"NOR i17 c0 i47",
"NOR i46 i47 i33",
"UNFILTER",
"FILTER 11",
"NOR i7 c0 i46",
"NOR i17 c0 i47",
"NOR i46 i47 i33",
"UNFILTER",
"FILTER 12",
"NOR i8 c0 i46",
"NOR i17 c0 i47",
"NOR i46 i47 i33",
"UNFILTER",
"FILTER 13",
"NOR i9 c0 i46",
"NOR i17 c0 i47",
"NOR i46 i47 i33",
"UNFILTER",
"FILTER 14",
"NOR i10 c0 i46",
"NOR i17 c0 i47",
"NOR i46 i47 i33",
"UNFILTER",
"FILTER 15",
"NOR i11 c0 i46",
"NOR i17 c0 i47",
"NOR i46 i47 i33",
"UNFILTER",
"FILTER 16",
"NOR i12 c0 i46",
"NOR i17 c0 i47",
"NOR i46 i47 i33",
"UNFILTER",
"FILTER 17",
"NOR i13 c0 i46",
"NOR i17 c0 i47",
"NOR i46 i47 i33",
"UNFILTER",
// Generate 5(th) Partial Product
"NOR i14 c0 i46",
"NOR i18 c0 i47",
"NOR i46 i47 i34",
"FILTER 4",
"NOR A c0 i46",
"NOR i18 c0 i47",
"NOR i46 i47 i34",
"UNFILTER",
"FILTER 5",
"NOR i0 c0 i46",
"NOR i18 c0 i47",
"NOR i46 i47 i34",
"UNFILTER",
"FILTER 6",
"NOR i1 c0 i46",
"NOR i18 c0 i47",
"NOR i46 i47 i34",
"UNFILTER",
"FILTER 7",
"NOR i2 c0 i46",
"NOR i18 c0 i47",
"NOR i46 i47 i34",
"UNFILTER",
"FILTER 8",
"NOR i3 c0 i46",
"NOR i18 c0 i47",
"NOR i46 i47 i34",
"UNFILTER",
"FILTER 9",
"NOR i4 c0 i46",
"NOR i18 c0 i47",
"NOR i46 i47 i34",
"UNFILTER",
"FILTER 10",
"NOR i5 c0 i46",
"NOR i18 c0 i47",
"NOR i46 i47 i34",
"UNFILTER",
"FILTER 11",
"NOR i6 c0 i46",
"NOR i18 c0 i47",
"NOR i46 i47 i34",
"UNFILTER",
"FILTER 12",
"NOR i7 c0 i46",
"NOR i18 c0 i47",
"NOR i46 i47 i34",
"UNFILTER",
"FILTER 13",
"NOR i8 c0 i46",
"NOR i18 c0 i47",
"NOR i46 i47 i34",
"UNFILTER",
"FILTER 14",
"NOR i9 c0 i46",
"NOR i18 c0 i47",
"NOR i46 i47 i34",
"UNFILTER",
"FILTER 15",
"NOR i10 c0 i46",
"NOR i18 c0 i47",
"NOR i46 i47 i34",
"UNFILTER",
"FILTER 16",
"NOR i11 c0 i46",
"NOR i18 c0 i47",
"NOR i46 i47 i34",
"UNFILTER",
"FILTER 17",
"NOR i12 c0 i46",
"NOR i18 c0 i47",
"NOR i46 i47 i34",
"UNFILTER",
"FILTER 18",
"NOR i13 c0 i46",
"NOR i18 c0 i47",
"NOR i46 i47 i34",
"UNFILTER",
// Generate 6(th) Partial Product
"NOR i14 c0 i46",
"NOR i19 c0 i47",
"NOR i46 i47 i35",
"FILTER 5",
"NOR A c0 i46",
"NOR i19 c0 i47",
"NOR i46 i47 i35",
"UNFILTER",
"FILTER 6",
"NOR i0 c0 i46",
"NOR i19 c0 i47",
"NOR i46 i47 i35",
"UNFILTER",
"FILTER 7",
"NOR i1 c0 i46",
"NOR i19 c0 i47",
"NOR i46 i47 i35",
"UNFILTER",
"FILTER 8",
"NOR i2 c0 i46",
"NOR i19 c0 i47",
"NOR i46 i47 i35",
"UNFILTER",
"FILTER 9",
"NOR i3 c0 i46",
"NOR i19 c0 i47",
"NOR i46 i47 i35",
"UNFILTER",
"FILTER 10",
"NOR i4 c0 i46",
"NOR i19 c0 i47",
"NOR i46 i47 i35",
"UNFILTER",
"FILTER 11",
"NOR i5 c0 i46",
"NOR i19 c0 i47",
"NOR i46 i47 i35",
"UNFILTER",
"FILTER 12",
"NOR i6 c0 i46",
"NOR i19 c0 i47",
"NOR i46 i47 i35",
"UNFILTER",
"FILTER 13",
"NOR i7 c0 i46",
"NOR i19 c0 i47",
"NOR i46 i47 i35",
"UNFILTER",
"FILTER 14",
"NOR i8 c0 i46",
"NOR i19 c0 i47",
"NOR i46 i47 i35",
"UNFILTER",
"FILTER 15",
"NOR i9 c0 i46",
"NOR i19 c0 i47",
"NOR i46 i47 i35",
"UNFILTER",
"FILTER 16",
"NOR i10 c0 i46",
"NOR i19 c0 i47",
"NOR i46 i47 i35",
"UNFILTER",
"FILTER 17",
"NOR i11 c0 i46",
"NOR i19 c0 i47",
"NOR i46 i47 i35",
"UNFILTER",
"FILTER 18",
"NOR i12 c0 i46",
"NOR i19 c0 i47",
"NOR i46 i47 i35",
"UNFILTER",
"FILTER 19",
"NOR i13 c0 i46",
"NOR i19 c0 i47",
"NOR i46 i47 i35",
"UNFILTER",
// Generate 7(th) Partial Product
"NOR i14 c0 i46",
"NOR i20 c0 i47",
"NOR i46 i47 i36",
"FILTER 6",
"NOR A c0 i46",
"NOR i20 c0 i47",
"NOR i46 i47 i36",
"UNFILTER",
"FILTER 7",
"NOR i0 c0 i46",
"NOR i20 c0 i47",
"NOR i46 i47 i36",
"UNFILTER",
"FILTER 8",
"NOR i1 c0 i46",
"NOR i20 c0 i47",
"NOR i46 i47 i36",
"UNFILTER",
"FILTER 9",
"NOR i2 c0 i46",
"NOR i20 c0 i47",
"NOR i46 i47 i36",
"UNFILTER",
"FILTER 10",
"NOR i3 c0 i46",
"NOR i20 c0 i47",
"NOR i46 i47 i36",
"UNFILTER",
"FILTER 11",
"NOR i4 c0 i46",
"NOR i20 c0 i47",
"NOR i46 i47 i36",
"UNFILTER",
"FILTER 12",
"NOR i5 c0 i46",
"NOR i20 c0 i47",
"NOR i46 i47 i36",
"UNFILTER",
"FILTER 13",
"NOR i6 c0 i46",
"NOR i20 c0 i47",
"NOR i46 i47 i36",
"UNFILTER",
"FILTER 14",
"NOR i7 c0 i46",
"NOR i20 c0 i47",
"NOR i46 i47 i36",
"UNFILTER",
"FILTER 15",
"NOR i8 c0 i46",
"NOR i20 c0 i47",
"NOR i46 i47 i36",
"UNFILTER",
"FILTER 16",
"NOR i9 c0 i46",
"NOR i20 c0 i47",
"NOR i46 i47 i36",
"UNFILTER",
"FILTER 17",
"NOR i10 c0 i46",
"NOR i20 c0 i47",
"NOR i46 i47 i36",
"UNFILTER",
"FILTER 18",
"NOR i11 c0 i46",
"NOR i20 c0 i47",
"NOR i46 i47 i36",
"UNFILTER",
"FILTER 19",
"NOR i12 c0 i46",
"NOR i20 c0 i47",
"NOR i46 i47 i36",
"UNFILTER",
"FILTER 20",
"NOR i13 c0 i46",
"NOR i20 c0 i47",
"NOR i46 i47 i36",
"UNFILTER",
// Generate 8(th) Partial Product
"NOR i14 c0 i46",
"NOR i21 c0 i47",
"NOR i46 i47 i37",
"FILTER 7",
"NOR A c0 i46",
"NOR i21 c0 i47",
"NOR i46 i47 i37",
"UNFILTER",
"FILTER 8",
"NOR i0 c0 i46",
"NOR i21 c0 i47",
"NOR i46 i47 i37",
"UNFILTER",
"FILTER 9",
"NOR i1 c0 i46",
"NOR i21 c0 i47",
"NOR i46 i47 i37",
"UNFILTER",
"FILTER 10",
"NOR i2 c0 i46",
"NOR i21 c0 i47",
"NOR i46 i47 i37",
"UNFILTER",
"FILTER 11",
"NOR i3 c0 i46",
"NOR i21 c0 i47",
"NOR i46 i47 i37",
"UNFILTER",
"FILTER 12",
"NOR i4 c0 i46",
"NOR i21 c0 i47",
"NOR i46 i47 i37",
"UNFILTER",
"FILTER 13",
"NOR i5 c0 i46",
"NOR i21 c0 i47",
"NOR i46 i47 i37",
"UNFILTER",
"FILTER 14",
"NOR i6 c0 i46",
"NOR i21 c0 i47",
"NOR i46 i47 i37",
"UNFILTER",
"FILTER 15",
"NOR i7 c0 i46",
"NOR i21 c0 i47",
"NOR i46 i47 i37",
"UNFILTER",
"FILTER 16",
"NOR i8 c0 i46",
"NOR i21 c0 i47",
"NOR i46 i47 i37",
"UNFILTER",
"FILTER 17",
"NOR i9 c0 i46",
"NOR i21 c0 i47",
"NOR i46 i47 i37",
"UNFILTER",
"FILTER 18",
"NOR i10 c0 i46",
"NOR i21 c0 i47",
"NOR i46 i47 i37",
"UNFILTER",
"FILTER 19",
"NOR i11 c0 i46",
"NOR i21 c0 i47",
"NOR i46 i47 i37",
"UNFILTER",
"FILTER 20",
"NOR i12 c0 i46",
"NOR i21 c0 i47",
"NOR i46 i47 i37",
"UNFILTER",
"FILTER 21",
"NOR i13 c0 i46",
"NOR i21 c0 i47",
"NOR i46 i47 i37",
"UNFILTER",
// Generate 9(th) Partial Product
"NOR i14 c0 i46",
"NOR i22 c0 i47",
"NOR i46 i47 i38",
"FILTER 8",
"NOR A c0 i46",
"NOR i22 c0 i47",
"NOR i46 i47 i38",
"UNFILTER",
"FILTER 9",
"NOR i0 c0 i46",
"NOR i22 c0 i47",
"NOR i46 i47 i38",
"UNFILTER",
"FILTER 10",
"NOR i1 c0 i46",
"NOR i22 c0 i47",
"NOR i46 i47 i38",
"UNFILTER",
"FILTER 11",
"NOR i2 c0 i46",
"NOR i22 c0 i47",
"NOR i46 i47 i38",
"UNFILTER",
"FILTER 12",
"NOR i3 c0 i46",
"NOR i22 c0 i47",
"NOR i46 i47 i38",
"UNFILTER",
"FILTER 13",
"NOR i4 c0 i46",
"NOR i22 c0 i47",
"NOR i46 i47 i38",
"UNFILTER",
"FILTER 14",
"NOR i5 c0 i46",
"NOR i22 c0 i47",
"NOR i46 i47 i38",
"UNFILTER",
"FILTER 15",
"NOR i6 c0 i46",
"NOR i22 c0 i47",
"NOR i46 i47 i38",
"UNFILTER",
"FILTER 16",
"NOR i7 c0 i46",
"NOR i22 c0 i47",
"NOR i46 i47 i38",
"UNFILTER",
"FILTER 17",
"NOR i8 c0 i46",
"NOR i22 c0 i47",
"NOR i46 i47 i38",
"UNFILTER",
"FILTER 18",
"NOR i9 c0 i46",
"NOR i22 c0 i47",
"NOR i46 i47 i38",
"UNFILTER",
"FILTER 19",
"NOR i10 c0 i46",
"NOR i22 c0 i47",
"NOR i46 i47 i38",
"UNFILTER",
"FILTER 20",
"NOR i11 c0 i46",
"NOR i22 c0 i47",
"NOR i46 i47 i38",
"UNFILTER",
"FILTER 21",
"NOR i12 c0 i46",
"NOR i22 c0 i47",
"NOR i46 i47 i38",
"UNFILTER",
"FILTER 22",
"NOR i13 c0 i46",
"NOR i22 c0 i47",
"NOR i46 i47 i38",
"UNFILTER",
// Generate 10(th) Partial Product
"NOR i14 c0 i46",
"NOR i23 c0 i47",
"NOR i46 i47 i39",
"FILTER 9",
"NOR A c0 i46",
"NOR i23 c0 i47",
"NOR i46 i47 i39",
"UNFILTER",
"FILTER 10",
"NOR i0 c0 i46",
"NOR i23 c0 i47",
"NOR i46 i47 i39",
"UNFILTER",
"FILTER 11",
"NOR i1 c0 i46",
"NOR i23 c0 i47",
"NOR i46 i47 i39",
"UNFILTER",
"FILTER 12",
"NOR i2 c0 i46",
"NOR i23 c0 i47",
"NOR i46 i47 i39",
"UNFILTER",
"FILTER 13",
"NOR i3 c0 i46",
"NOR i23 c0 i47",
"NOR i46 i47 i39",
"UNFILTER",
"FILTER 14",
"NOR i4 c0 i46",
"NOR i23 c0 i47",
"NOR i46 i47 i39",
"UNFILTER",
"FILTER 15",
"NOR i5 c0 i46",
"NOR i23 c0 i47",
"NOR i46 i47 i39",
"UNFILTER",
"FILTER 16",
"NOR i6 c0 i46",
"NOR i23 c0 i47",
"NOR i46 i47 i39",
"UNFILTER",
"FILTER 17",
"NOR i7 c0 i46",
"NOR i23 c0 i47",
"NOR i46 i47 i39",
"UNFILTER",
"FILTER 18",
"NOR i8 c0 i46",
"NOR i23 c0 i47",
"NOR i46 i47 i39",
"UNFILTER",
"FILTER 19",
"NOR i9 c0 i46",
"NOR i23 c0 i47",
"NOR i46 i47 i39",
"UNFILTER",
"FILTER 20",
"NOR i10 c0 i46",
"NOR i23 c0 i47",
"NOR i46 i47 i39",
"UNFILTER",
"FILTER 21",
"NOR i11 c0 i46",
"NOR i23 c0 i47",
"NOR i46 i47 i39",
"UNFILTER",
"FILTER 22",
"NOR i12 c0 i46",
"NOR i23 c0 i47",
"NOR i46 i47 i39",
"UNFILTER",
"FILTER 23",
"NOR i13 c0 i46",
"NOR i23 c0 i47",
"NOR i46 i47 i39",
"UNFILTER",
// Generate 11(th) Partial Product
"NOR i14 c0 i46",
"NOR i24 c0 i47",
"NOR i46 i47 i40",
"FILTER 10",
"NOR A c0 i46",
"NOR i24 c0 i47",
"NOR i46 i47 i40",
"UNFILTER",
"FILTER 11",
"NOR i0 c0 i46",
"NOR i24 c0 i47",
"NOR i46 i47 i40",
"UNFILTER",
"FILTER 12",
"NOR i1 c0 i46",
"NOR i24 c0 i47",
"NOR i46 i47 i40",
"UNFILTER",
"FILTER 13",
"NOR i2 c0 i46",
"NOR i24 c0 i47",
"NOR i46 i47 i40",
"UNFILTER",
"FILTER 14",
"NOR i3 c0 i46",
"NOR i24 c0 i47",
"NOR i46 i47 i40",
"UNFILTER",
"FILTER 15",
"NOR i4 c0 i46",
"NOR i24 c0 i47",
"NOR i46 i47 i40",
"UNFILTER",
"FILTER 16",
"NOR i5 c0 i46",
"NOR i24 c0 i47",
"NOR i46 i47 i40",
"UNFILTER",
"FILTER 17",
"NOR i6 c0 i46",
"NOR i24 c0 i47",
"NOR i46 i47 i40",
"UNFILTER",
"FILTER 18",
"NOR i7 c0 i46",
"NOR i24 c0 i47",
"NOR i46 i47 i40",
"UNFILTER",
"FILTER 19",
"NOR i8 c0 i46",
"NOR i24 c0 i47",
"NOR i46 i47 i40",
"UNFILTER",
"FILTER 20",
"NOR i9 c0 i46",
"NOR i24 c0 i47",
"NOR i46 i47 i40",
"UNFILTER",
"FILTER 21",
"NOR i10 c0 i46",
"NOR i24 c0 i47",
"NOR i46 i47 i40",
"UNFILTER",
"FILTER 22",
"NOR i11 c0 i46",
"NOR i24 c0 i47",
"NOR i46 i47 i40",
"UNFILTER",
"FILTER 23",
"NOR i12 c0 i46",
"NOR i24 c0 i47",
"NOR i46 i47 i40",
"UNFILTER",
"FILTER 24",
"NOR i13 c0 i46",
"NOR i24 c0 i47",
"NOR i46 i47 i40",
"UNFILTER",
// Generate 12(th) Partial Product
"NOR i14 c0 i46",
"NOR i25 c0 i47",
"NOR i46 i47 i41",
"FILTER 11",
"NOR A c0 i46",
"NOR i25 c0 i47",
"NOR i46 i47 i41",
"UNFILTER",
"FILTER 12",
"NOR i0 c0 i46",
"NOR i25 c0 i47",
"NOR i46 i47 i41",
"UNFILTER",
"FILTER 13",
"NOR i1 c0 i46",
"NOR i25 c0 i47",
"NOR i46 i47 i41",
"UNFILTER",
"FILTER 14",
"NOR i2 c0 i46",
"NOR i25 c0 i47",
"NOR i46 i47 i41",
"UNFILTER",
"FILTER 15",
"NOR i3 c0 i46",
"NOR i25 c0 i47",
"NOR i46 i47 i41",
"UNFILTER",
"FILTER 16",
"NOR i4 c0 i46",
"NOR i25 c0 i47",
"NOR i46 i47 i41",
"UNFILTER",
"FILTER 17",
"NOR i5 c0 i46",
"NOR i25 c0 i47",
"NOR i46 i47 i41",
"UNFILTER",
"FILTER 18",
"NOR i6 c0 i46",
"NOR i25 c0 i47",
"NOR i46 i47 i41",
"UNFILTER",
"FILTER 19",
"NOR i7 c0 i46",
"NOR i25 c0 i47",
"NOR i46 i47 i41",
"UNFILTER",
"FILTER 20",
"NOR i8 c0 i46",
"NOR i25 c0 i47",
"NOR i46 i47 i41",
"UNFILTER",
"FILTER 21",
"NOR i9 c0 i46",
"NOR i25 c0 i47",
"NOR i46 i47 i41",
"UNFILTER",
"FILTER 22",
"NOR i10 c0 i46",
"NOR i25 c0 i47",
"NOR i46 i47 i41",
"UNFILTER",
"FILTER 23",
"NOR i11 c0 i46",
"NOR i25 c0 i47",
"NOR i46 i47 i41",
"UNFILTER",
"FILTER 24",
"NOR i12 c0 i46",
"NOR i25 c0 i47",
"NOR i46 i47 i41",
"UNFILTER",
"FILTER 25",
"NOR i13 c0 i46",
"NOR i25 c0 i47",
"NOR i46 i47 i41",
"UNFILTER",
// Generate 13(th) Partial Product
"NOR i14 c0 i46",
"NOR i26 c0 i47",
"NOR i46 i47 i42",
"FILTER 12",
"NOR A c0 i46",
"NOR i26 c0 i47",
"NOR i46 i47 i42",
"UNFILTER",
"FILTER 13",
"NOR i0 c0 i46",
"NOR i26 c0 i47",
"NOR i46 i47 i42",
"UNFILTER",
"FILTER 14",
"NOR i1 c0 i46",
"NOR i26 c0 i47",
"NOR i46 i47 i42",
"UNFILTER",
"FILTER 15",
"NOR i2 c0 i46",
"NOR i26 c0 i47",
"NOR i46 i47 i42",
"UNFILTER",
"FILTER 16",
"NOR i3 c0 i46",
"NOR i26 c0 i47",
"NOR i46 i47 i42",
"UNFILTER",
"FILTER 17",
"NOR i4 c0 i46",
"NOR i26 c0 i47",
"NOR i46 i47 i42",
"UNFILTER",
"FILTER 18",
"NOR i5 c0 i46",
"NOR i26 c0 i47",
"NOR i46 i47 i42",
"UNFILTER",
"FILTER 19",
"NOR i6 c0 i46",
"NOR i26 c0 i47",
"NOR i46 i47 i42",
"UNFILTER",
"FILTER 20",
"NOR i7 c0 i46",
"NOR i26 c0 i47",
"NOR i46 i47 i42",
"UNFILTER",
"FILTER 21",
"NOR i8 c0 i46",
"NOR i26 c0 i47",
"NOR i46 i47 i42",
"UNFILTER",
"FILTER 22",
"NOR i9 c0 i46",
"NOR i26 c0 i47",
"NOR i46 i47 i42",
"UNFILTER",
"FILTER 23",
"NOR i10 c0 i46",
"NOR i26 c0 i47",
"NOR i46 i47 i42",
"UNFILTER",
"FILTER 24",
"NOR i11 c0 i46",
"NOR i26 c0 i47",
"NOR i46 i47 i42",
"UNFILTER",
"FILTER 25",
"NOR i12 c0 i46",
"NOR i26 c0 i47",
"NOR i46 i47 i42",
"UNFILTER",
"FILTER 26",
"NOR i13 c0 i46",
"NOR i26 c0 i47",
"NOR i46 i47 i42",
"UNFILTER",
// Generate 14(th) Partial Product
"NOR i14 c0 i46",
"NOR i27 c0 i47",
"NOR i46 i47 i43",
"FILTER 13",
"NOR A c0 i46",
"NOR i27 c0 i47",
"NOR i46 i47 i43",
"UNFILTER",
"FILTER 14",
"NOR i0 c0 i46",
"NOR i27 c0 i47",
"NOR i46 i47 i43",
"UNFILTER",
"FILTER 15",
"NOR i1 c0 i46",
"NOR i27 c0 i47",
"NOR i46 i47 i43",
"UNFILTER",
"FILTER 16",
"NOR i2 c0 i46",
"NOR i27 c0 i47",
"NOR i46 i47 i43",
"UNFILTER",
"FILTER 17",
"NOR i3 c0 i46",
"NOR i27 c0 i47",
"NOR i46 i47 i43",
"UNFILTER",
"FILTER 18",
"NOR i4 c0 i46",
"NOR i27 c0 i47",
"NOR i46 i47 i43",
"UNFILTER",
"FILTER 19",
"NOR i5 c0 i46",
"NOR i27 c0 i47",
"NOR i46 i47 i43",
"UNFILTER",
"FILTER 20",
"NOR i6 c0 i46",
"NOR i27 c0 i47",
"NOR i46 i47 i43",
"UNFILTER",
"FILTER 21",
"NOR i7 c0 i46",
"NOR i27 c0 i47",
"NOR i46 i47 i43",
"UNFILTER",
"FILTER 22",
"NOR i8 c0 i46",
"NOR i27 c0 i47",
"NOR i46 i47 i43",
"UNFILTER",
"FILTER 23",
"NOR i9 c0 i46",
"NOR i27 c0 i47",
"NOR i46 i47 i43",
"UNFILTER",
"FILTER 24",
"NOR i10 c0 i46",
"NOR i27 c0 i47",
"NOR i46 i47 i43",
"UNFILTER",
"FILTER 25",
"NOR i11 c0 i46",
"NOR i27 c0 i47",
"NOR i46 i47 i43",
"UNFILTER",
"FILTER 26",
"NOR i12 c0 i46",
"NOR i27 c0 i47",
"NOR i46 i47 i43",
"UNFILTER",
"FILTER 27",
"NOR i13 c0 i46",
"NOR i27 c0 i47",
"NOR i46 i47 i43",
"UNFILTER",
// Generate 15(th) Partial Product
"NOR i14 c0 i46",
"NOR i28 c0 i47",
"NOR i46 i47 i44",
"FILTER 14",
"NOR A c0 i46",
"NOR i28 c0 i47",
"NOR i46 i47 i44",
"UNFILTER",
"FILTER 15",
"NOR i0 c0 i46",
"NOR i28 c0 i47",
"NOR i46 i47 i44",
"UNFILTER",
"FILTER 16",
"NOR i1 c0 i46",
"NOR i28 c0 i47",
"NOR i46 i47 i44",
"UNFILTER",
"FILTER 17",
"NOR i2 c0 i46",
"NOR i28 c0 i47",
"NOR i46 i47 i44",
"UNFILTER",
"FILTER 18",
"NOR i3 c0 i46",
"NOR i28 c0 i47",
"NOR i46 i47 i44",
"UNFILTER",
"FILTER 19",
"NOR i4 c0 i46",
"NOR i28 c0 i47",
"NOR i46 i47 i44",
"UNFILTER",
"FILTER 20",
"NOR i5 c0 i46",
"NOR i28 c0 i47",
"NOR i46 i47 i44",
"UNFILTER",
"FILTER 21",
"NOR i6 c0 i46",
"NOR i28 c0 i47",
"NOR i46 i47 i44",
"UNFILTER",
"FILTER 22",
"NOR i7 c0 i46",
"NOR i28 c0 i47",
"NOR i46 i47 i44",
"UNFILTER",
"FILTER 23",
"NOR i8 c0 i46",
"NOR i28 c0 i47",
"NOR i46 i47 i44",
"UNFILTER",
"FILTER 24",
"NOR i9 c0 i46",
"NOR i28 c0 i47",
"NOR i46 i47 i44",
"UNFILTER",
"FILTER 25",
"NOR i10 c0 i46",
"NOR i28 c0 i47",
"NOR i46 i47 i44",
"UNFILTER",
"FILTER 26",
"NOR i11 c0 i46",
"NOR i28 c0 i47",
"NOR i46 i47 i44",
"UNFILTER",
"FILTER 27",
"NOR i12 c0 i46",
"NOR i28 c0 i47",
"NOR i46 i47 i44",
"UNFILTER",
"FILTER 28",
"NOR i13 c0 i46",
"NOR i28 c0 i47",
"NOR i46 i47 i44",
"UNFILTER",
// Generate 16(th) Partial Product
"NOR i14 c0 i46",
"NOR i29 c0 i47",
"NOR i46 i47 i45",
"FILTER 15",
"NOR A c0 i46",
"NOR i29 c0 i47",
"NOR i46 i47 i45",
"UNFILTER",
"FILTER 16",
"NOR i0 c0 i46",
"NOR i29 c0 i47",
"NOR i46 i47 i45",
"UNFILTER",
"FILTER 17",
"NOR i1 c0 i46",
"NOR i29 c0 i47",
"NOR i46 i47 i45",
"UNFILTER",
"FILTER 18",
"NOR i2 c0 i46",
"NOR i29 c0 i47",
"NOR i46 i47 i45",
"UNFILTER",
"FILTER 19",
"NOR i3 c0 i46",
"NOR i29 c0 i47",
"NOR i46 i47 i45",
"UNFILTER",
"FILTER 20",
"NOR i4 c0 i46",
"NOR i29 c0 i47",
"NOR i46 i47 i45",
"UNFILTER",
"FILTER 21",
"NOR i5 c0 i46",
"NOR i29 c0 i47",
"NOR i46 i47 i45",
"UNFILTER",
"FILTER 22",
"NOR i6 c0 i46",
"NOR i29 c0 i47",
"NOR i46 i47 i45",
"UNFILTER",
"FILTER 23",
"NOR i7 c0 i46",
"NOR i29 c0 i47",
"NOR i46 i47 i45",
"UNFILTER",
"FILTER 24",
"NOR i8 c0 i46",
"NOR i29 c0 i47",
"NOR i46 i47 i45",
"UNFILTER",
"FILTER 25",
"NOR i9 c0 i46",
"NOR i29 c0 i47",
"NOR i46 i47 i45",
"UNFILTER",
"FILTER 26",
"NOR i10 c0 i46",
"NOR i29 c0 i47",
"NOR i46 i47 i45",
"UNFILTER",
"FILTER 27",
"NOR i11 c0 i46",
"NOR i29 c0 i47",
"NOR i46 i47 i45",
"UNFILTER",
"FILTER 28",
"NOR i12 c0 i46",
"NOR i29 c0 i47",
"NOR i46 i47 i45",
"UNFILTER",
"FILTER 29",
"NOR i13 c0 i46",
"NOR i29 c0 i47",
"NOR i46 i47 i45",
"UNFILTER",
// Add i30 to i31 store i30
"LOCK",
"BUF R i0",
"NOR i30 i31 i46",
"NOR i30 i46 i47",
"NOR i31 i46 i48",
"NOR i47 i48 i49",
"NOR i49 c0 i1",
"NOR i30 c0 i46",
"NOR i31 c0 i47",
"NOR i46 i47 i2",
"NOR i1 i0 i46",
"NOR i1 i46 i47",
"NOR i0 i46 i48",
"NOR i47 i48 i49",
"NOR i49 c0 i30",
"NOR i1 c0 i46",
"NOR i0 c0 i47",
"NOR i46 i47 i3",
"OR i2 i3 i1",
"BUF i1 L",
"RELEASE",
// Add i32 to i33 store i32
"LOCK",
"BUF R i0",
"NOR i32 i33 i46",
"NOR i32 i46 i47",
"NOR i33 i46 i48",
"NOR i47 i48 i49",
"NOR i49 c0 i1",
"NOR i32 c0 i46",
"NOR i33 c0 i47",
"NOR i46 i47 i2",
"NOR i1 i0 i46",
"NOR i1 i46 i47",
"NOR i0 i46 i48",
"NOR i47 i48 i49",
"NOR i49 c0 i32",
"NOR i1 c0 i46",
"NOR i0 c0 i47",
"NOR i46 i47 i3",
"OR i2 i3 i1",
"BUF i1 L",
"RELEASE",
// Add i34 to i35 store i34
"LOCK",
"BUF R i0",
"NOR i34 i35 i46",
"NOR i34 i46 i47",
"NOR i35 i46 i48",
"NOR i47 i48 i49",
"NOR i49 c0 i1",
"NOR i34 c0 i46",
"NOR i35 c0 i47",
"NOR i46 i47 i2",
"NOR i1 i0 i46",
"NOR i1 i46 i47",
"NOR i0 i46 i48",
"NOR i47 i48 i49",
"NOR i49 c0 i34",
"NOR i1 c0 i46",
"NOR i0 c0 i47",
"NOR i46 i47 i3",
"OR i2 i3 i1",
"BUF i1 L",
"RELEASE",
// Add i36 to i37 store i36
"LOCK",
"BUF R i0",
"NOR i36 i37 i46",
"NOR i36 i46 i47",
"NOR i37 i46 i48",
"NOR i47 i48 i49",
"NOR i49 c0 i1",
"NOR i36 c0 i46",
"NOR i37 c0 i47",
"NOR i46 i47 i2",
"NOR i1 i0 i46",
"NOR i1 i46 i47",
"NOR i0 i46 i48",
"NOR i47 i48 i49",
"NOR i49 c0 i36",
"NOR i1 c0 i46",
"NOR i0 c0 i47",
"NOR i46 i47 i3",
"OR i2 i3 i1",
"BUF i1 L",
"RELEASE",
// Add i38 to i39 store i38
"LOCK",
"BUF R i0",
"NOR i38 i39 i46",
"NOR i38 i46 i47",
"NOR i39 i46 i48",
"NOR i47 i48 i49",
"NOR i49 c0 i1",
"NOR i38 c0 i46",
"NOR i39 c0 i47",
"NOR i46 i47 i2",
"NOR i1 i0 i46",
"NOR i1 i46 i47",
"NOR i0 i46 i48",
"NOR i47 i48 i49",
"NOR i49 c0 i38",
"NOR i1 c0 i46",
"NOR i0 c0 i47",
"NOR i46 i47 i3",
"OR i2 i3 i1",
"BUF i1 L",
"RELEASE",
// Add i40 to i41 store i40
"LOCK",
"BUF R i0",
"NOR i40 i41 i46",
"NOR i40 i46 i47",
"NOR i41 i46 i48",
"NOR i47 i48 i49",
"NOR i49 c0 i1",
"NOR i40 c0 i46",
"NOR i41 c0 i47",
"NOR i46 i47 i2",
"NOR i1 i0 i46",
"NOR i1 i46 i47",
"NOR i0 i46 i48",
"NOR i47 i48 i49",
"NOR i49 c0 i40",
"NOR i1 c0 i46",
"NOR i0 c0 i47",
"NOR i46 i47 i3",
"OR i2 i3 i1",
"BUF i1 L",
"RELEASE",
// Add i42 to i43 store i42
"LOCK",
"BUF R i0",
"NOR i42 i43 i46",
"NOR i42 i46 i47",
"NOR i43 i46 i48",
"NOR i47 i48 i49",
"NOR i49 c0 i1",
"NOR i42 c0 i46",
"NOR i43 c0 i47",
"NOR i46 i47 i2",
"NOR i1 i0 i46",
"NOR i1 i46 i47",
"NOR i0 i46 i48",
"NOR i47 i48 i49",
"NOR i49 c0 i42",
"NOR i1 c0 i46",
"NOR i0 c0 i47",
"NOR i46 i47 i3",
"OR i2 i3 i1",
"BUF i1 L",
"RELEASE",
// Add i44 to i45 store i44
"LOCK",
"BUF R i0",
"NOR i44 i45 i46",
"NOR i44 i46 i47",
"NOR i45 i46 i48",
"NOR i47 i48 i49",
"NOR i49 c0 i1",
"NOR i44 c0 i46",
"NOR i45 c0 i47",
"NOR i46 i47 i2",
"NOR i1 i0 i46",
"NOR i1 i46 i47",
"NOR i0 i46 i48",
"NOR i47 i48 i49",
"NOR i49 c0 i44",
"NOR i1 c0 i46",
"NOR i0 c0 i47",
"NOR i46 i47 i3",
"OR i2 i3 i1",
"BUF i1 L",
"RELEASE",
// Add i30 to i32 store i30
"LOCK",
"BUF R i0",
"NOR i30 i32 i46",
"NOR i30 i46 i47",
"NOR i32 i46 i48",
"NOR i47 i48 i49",
"NOR i49 c0 i1",
"NOR i30 c0 i46",
"NOR i32 c0 i47",
"NOR i46 i47 i2",
"NOR i1 i0 i46",
"NOR i1 i46 i47",
"NOR i0 i46 i48",
"NOR i47 i48 i49",
"NOR i49 c0 i30",
"NOR i1 c0 i46",
"NOR i0 c0 i47",
"NOR i46 i47 i3",
"OR i2 i3 i1",
"BUF i1 L",
"RELEASE",
// Add i34 to i36 store i34
"LOCK",
"BUF R i0",
"NOR i34 i36 i46",
"NOR i34 i46 i47",
"NOR i36 i46 i48",
"NOR i47 i48 i49",
"NOR i49 c0 i1",
"NOR i34 c0 i46",
"NOR i36 c0 i47",
"NOR i46 i47 i2",
"NOR i1 i0 i46",
"NOR i1 i46 i47",
"NOR i0 i46 i48",
"NOR i47 i48 i49",
"NOR i49 c0 i34",
"NOR i1 c0 i46",
"NOR i0 c0 i47",
"NOR i46 i47 i3",
"OR i2 i3 i1",
"BUF i1 L",
"RELEASE",
// Add i38 to i40 store i38
"LOCK",
"BUF R i0",
"NOR i38 i40 i46",
"NOR i38 i46 i47",
"NOR i40 i46 i48",
"NOR i47 i48 i49",
"NOR i49 c0 i1",
"NOR i38 c0 i46",
"NOR i40 c0 i47",
"NOR i46 i47 i2",
"NOR i1 i0 i46",
"NOR i1 i46 i47",
"NOR i0 i46 i48",
"NOR i47 i48 i49",
"NOR i49 c0 i38",
"NOR i1 c0 i46",
"NOR i0 c0 i47",
"NOR i46 i47 i3",
"OR i2 i3 i1",
"BUF i1 L",
"RELEASE",
// Add i42 to i44 store i42
"LOCK",
"BUF R i0",
"NOR i42 i44 i46",
"NOR i42 i46 i47",
"NOR i44 i46 i48",
"NOR i47 i48 i49",
"NOR i49 c0 i1",
"NOR i42 c0 i46",
"NOR i44 c0 i47",
"NOR i46 i47 i2",
"NOR i1 i0 i46",
"NOR i1 i46 i47",
"NOR i0 i46 i48",
"NOR i47 i48 i49",
"NOR i49 c0 i42",
"NOR i1 c0 i46",
"NOR i0 c0 i47",
"NOR i46 i47 i3",
"OR i2 i3 i1",
"BUF i1 L",
"RELEASE",
// Add i30 to i34 store i30
"LOCK",
"BUF R i0",
"NOR i30 i34 i46",
"NOR i30 i46 i47",
"NOR i34 i46 i48",
"NOR i47 i48 i49",
"NOR i49 c0 i1",
"NOR i30 c0 i46",
"NOR i34 c0 i47",
"NOR i46 i47 i2",
"NOR i1 i0 i46",
"NOR i1 i46 i47",
"NOR i0 i46 i48",
"NOR i47 i48 i49",
"NOR i49 c0 i30",
"NOR i1 c0 i46",
"NOR i0 c0 i47",
"NOR i46 i47 i3",
"OR i2 i3 i1",
"BUF i1 L",
"RELEASE",
// Add i38 to i42 store i38
"LOCK",
"BUF R i0",
"NOR i38 i42 i46",
"NOR i38 i46 i47",
"NOR i42 i46 i48",
"NOR i47 i48 i49",
"NOR i49 c0 i1",
"NOR i38 c0 i46",
"NOR i42 c0 i47",
"NOR i46 i47 i2",
"NOR i1 i0 i46",
"NOR i1 i46 i47",
"NOR i0 i46 i48",
"NOR i47 i48 i49",
"NOR i49 c0 i38",
"NOR i1 c0 i46",
"NOR i0 c0 i47",
"NOR i46 i47 i3",
"OR i2 i3 i1",
"BUF i1 L",
"RELEASE",
// Add i30 to i38 store i30
"LOCK",
"BUF R i0",
"NOR i30 i38 i46",
"NOR i30 i46 i47",
"NOR i38 i46 i48",
"NOR i47 i48 i49",
"NOR i49 c0 i1",
"NOR i30 c0 i46",
"NOR i38 c0 i47",
"NOR i46 i47 i2",
"NOR i1 i0 i46",
"NOR i1 i46 i47",
"NOR i0 i46 i48",
"NOR i47 i48 i49",
"NOR i49 c0 C",
"NOR i1 c0 i46",
"NOR i0 c0 i47",
"NOR i46 i47 i3",
"OR i2 i3 i1",
"BUF i1 L",
"RELEASE",
}};
table.insert({"MUL32", mul32});

/* ====================== CMPLT ============================= */
deque <string> cmplt {{
"LOCK",
"BUF R i0",
"NOR c0 B i1",
"NOR i1 c0 i6",
"NOR A c0 i8",
"NOR i6 i8 i2",
"NOR A B i6",
"NOR A i6 i8",
"NOR B i6 i9",
"NOR i8 i9 i10",
"NOR i10 c0 i3",
"NOR c0 i3 i4",
"NOR i0 c0 i6",
"NOR i4 c0 i8",
"NOR i6 i8 i5",
// "AND R i5 i6",
"OR i2 i5 i7",
"BUF i7 T",
"RELEASE"
}};
table.insert({"CMPLT", cmplt});

/* ====================== CMPST ============================= */
deque <string> cmpst {{
"LOCK",
"BUF R i0",
"NOR c0 A i1",
"NOR i1 c0 i6",
"NOR B c0 i8",
"NOR i6 i8 i2",
"NOR A B i6",
"NOR A i6 i8",
"NOR B i6 i9",
"NOR i8 i9 i10",
"NOR i10 c0 i3",
"NOR c0 i3 i4",
"NOR i0 c0 i6",
"NOR i4 c0 i8",
"NOR i6 i8 i5",
// "AND R i5 i6",
"OR i2 i5 i7",
"BUF i7 T",
"RELEASE"
}};
table.insert({"CMPST", cmpst});

/* ====================== CMPEQ ============================= */
deque <string> cmpeq {{
"LOCK",
"BUF R i0",
"FILTER 0",
"COPY c1 i0",
"UNFILTER",
"NOR A B i4",
"NOR A i4 i5",
"NOR B i4 i6",
"NOR i5 i6 i7",
"NOR i7 c0 i1",
"NOR c0 i1 i2",
"NOR i0 c0 i4",
"NOR i2 c0 i5",
"NOR i4 i5 i3",
"BUF i3 T",
"RELEASE"
}};
table.insert({"CMPEQ", cmpeq});

/* ====================== FUZZY ============================= */
deque <string> fuzzy {{
"LOCK",
"BUF R i0",
"FILTER 0",
"COPY c1 i0",
"UNFILTER",
"NOR A B i4",
"NOR A i4 i5",
"NOR B i4 i6",
"NOR i5 i6 i7",
"NOR i7 c0 i1",
"NOR c0 i1 i2",
"NOR i0 c0 i4",
"NOR i2 c0 i5",
"NOR i4 i5 i3",
"OR C i3 i1"
"BUF i1 T",
"RELEASE"
}};
table.insert({"FUZZY", fuzzy});

/* ====================== BFLIP ============================= */
// i8 stores the intermediary that can be overwritten
deque <string> bflip8 {{
// Left shift A by 1
"LOCK",
"BUF R i0",
"BUF A T",
"RELEASE",
// Left shift A by 2
"LOCK",
"BUF R i8",
"BUF i0 T",
"RELEASE",
// Left shift A by 3
"LOCK",
"BUF R i1",
"BUF i8 T",
"RELEASE",
// Left shift A by 4
"LOCK",
"BUF R i8",
"BUF i1 T",
"RELEASE",
// Left shift A by 5
"LOCK",
"BUF R i2",
"BUF i8 T",
"RELEASE",
// Left shift A by 6
"LOCK",
"BUF R i4",
"BUF i2 T",
"RELEASE",
// Left shift A by 7
"LOCK",
"BUF R i3",
"BUF i4 T",
"RELEASE",
// Left shift A by 8 (all 0 in i8)
"LOCK",
"BUF R i5",
"BUF i3 T",
"RELEASE",
// Left shift A by 1
"LOCK",
"BUF R i8",
"BUF i5 T",
"RELEASE",
// Left shift A by 2
"LOCK",
"BUF R i6",
"BUF i8 T",
"RELEASE",
// Left shift A by 3
"LOCK",
"BUF R i8",
"BUF i6 T",
"RELEASE",
// Left shift A by 4
"LOCK",
"BUF R i7",
"BUF i8 T",
"RELEASE",
// Left shift A by 5
"LOCK",
"BUF R i8",
"BUF i7 T",
"RELEASE",
// Latch the correct result
"FILTER 7",
"COPY i3 B",
"UNFILTER",
"FILTER 6",
"COPY i2 B",
"UNFILTER",
"FILTER 5",
"COPY i1 B",
"UNFILTER",
"FILTER 4",
"COPY i0 B",
"UNFILTER",
"FILTER 3",
"COPY i7 B",
"UNFILTER",
"FILTER 2",
"COPY i6 B",
"UNFILTER",
"FILTER 1",
"COPY i5 B",
"UNFILTER",
"FILTER 0",
"COPY i4 B",
"UNFILTER"
}};
table.insert({"BFLIP8", bflip8});

/* ====================== POPC8 ============================= */
// i0 and i10 stores the intermediary shift value
deque <string> popc8 {{
"COPY c0 B", // overwrite B
// Left shift A by 1
"LOCK",
"BUF R i0",
"BUF A T",
"RELEASE",
// Left shift A by 2
"LOCK",
"BUF R i10",
"BUF i0 T",
"RELEASE",
// Left shift A by 3
"LOCK",
"BUF R i0",
"BUF i10 T",
"RELEASE",
// Left shift A by 4
"LOCK",
"BUF R i10",
"BUF i0 T",
"RELEASE",
// Left shift A by 5
"LOCK",
"BUF R i0",
"BUF i10 T",
"RELEASE",
// Left shift A by 6, capture the MSB, store in i8
"LOCK",
"BUF R i8",
"BUF i0 T",
"RELEASE",
// Capture next bit
"LOCK",
"BUF R i7",
"BUF i8 T",
"RELEASE",
// Capture next bit
"LOCK",
"BUF R i6",
"BUF i7 T",
"RELEASE",
// Capture next bit
"LOCK",
"BUF R i5",
"BUF i6 T",
"RELEASE",
// Capture next bit
"LOCK",
"BUF R i4",
"BUF i5 T",
"RELEASE",
// Capture next bit
"LOCK",
"BUF R i3",
"BUF i4 T",
"RELEASE",
// Capture next bit
"LOCK",
"BUF R i2",
"BUF i3 T",
"RELEASE",
// Capture next bit
"LOCK",
"BUF R i1",
"BUF i2 T",
"RELEASE",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
// Start the shift and add sequence, sum operand store in i9
"LOCK",
"BUF R i0",
"FILTER 0",
"COPY i8 i0",
"UNFILTER",
"NOR B i0 i12",
"NOR B i12 i13",
"NOR i0 i12 i14",
"NOR i13 i14 i15",
"NOR i15 c0 i10",
"NOR B c0 i12",
"NOR i0 c0 i13",
"NOR i12 i13 i11",
"COPY i10 B",
"BUF i11 L",
"RELEASE",
// Add
"LOCK",
"BUF R i0",
"FILTER 0",
"COPY i7 i0",
"UNFILTER",
"NOR B i0 i12",
"NOR B i12 i13",
"NOR i0 i12 i14",
"NOR i13 i14 i15",
"NOR i15 c0 i10",
"NOR B c0 i12",
"NOR i0 c0 i13",
"NOR i12 i13 i11",
"COPY i10 B",
"BUF i11 L",
"RELEASE",
// Add
"LOCK",
"BUF R i0",
"FILTER 0",
"COPY i6 i0",
"UNFILTER",
"NOR B i0 i12",
"NOR B i12 i13",
"NOR i0 i12 i14",
"NOR i13 i14 i15",
"NOR i15 c0 i10",
"NOR B c0 i12",
"NOR i0 c0 i13",
"NOR i12 i13 i11",
"COPY i10 B",
"BUF i11 L",
"RELEASE",
// Add
"LOCK",
"BUF R i0",
"FILTER 0",
"COPY i5 i0",
"UNFILTER",
"NOR B i0 i12",
"NOR B i12 i13",
"NOR i0 i12 i14",
"NOR i13 i14 i15",
"NOR i15 c0 i10",
"NOR B c0 i12",
"NOR i0 c0 i13",
"NOR i12 i13 i11",
"COPY i10 B",
"BUF i11 L",
"RELEASE",
// Add
"LOCK",
"BUF R i0",
"FILTER 0",
"COPY i4 i0",
"UNFILTER",
"NOR B i0 i12",
"NOR B i12 i13",
"NOR i0 i12 i14",
"NOR i13 i14 i15",
"NOR i15 c0 i10",
"NOR B c0 i12",
"NOR i0 c0 i13",
"NOR i12 i13 i11",
"COPY i10 B",
"BUF i11 L",
"RELEASE",
// Add
"LOCK",
"BUF R i0",
"FILTER 0",
"COPY i3 i0",
"UNFILTER",
"NOR B i0 i12",
"NOR B i12 i13",
"NOR i0 i12 i14",
"NOR i13 i14 i15",
"NOR i15 c0 i10",
"NOR B c0 i12",
"NOR i0 c0 i13",
"NOR i12 i13 i11",
"COPY i10 B",
"BUF i11 L",
"RELEASE",
// Add
"LOCK",
"BUF R i0",
"FILTER 0",
"COPY i2 i0",
"UNFILTER",
"NOR B i0 i12",
"NOR B i12 i13",
"NOR i0 i12 i14",
"NOR i13 i14 i15",
"NOR i15 c0 i10",
"NOR B c0 i12",
"NOR i0 c0 i13",
"NOR i12 i13 i11",
"COPY i10 B",
"BUF i11 L",
"RELEASE",
// Add
"LOCK",
"BUF R i0",
"FILTER 0",
"COPY i1 i0",
"UNFILTER",
"NOR B i0 i12",
"NOR B i12 i13",
"NOR i0 i12 i14",
"NOR i13 i14 i15",
"NOR i15 c0 i10",
"NOR B c0 i12",
"NOR i0 c0 i13",
"NOR i12 i13 i11",
"COPY i10 B",
"BUF i11 L",
"RELEASE"
}};
table.insert({"POPC8", popc8});
/* ====================== RDIV8 ============================= */
// Remainder division between 8 bit dividend A and 4 bit divisor B
// First stage dividend store in i11
// Second stage dvidend input in i3
// Third stage dividend input in i2
// Fourth stage dividen input in i1
deque <string> rdiv8 {{
"COPY c0 i11",
// Shift the dividend in the correct place
// Left shift A by 1
"LOCK",
"BUF R i0",
"BUF A T",
"RELEASE",
// Left shift A by 2
"LOCK",
"BUF R i10",
"BUF i0 T",
"RELEASE",
// Left shift A by 3
"LOCK",
"BUF R i0",
"BUF i10 T",
"RELEASE",
// Left shift A by 4
"LOCK",
"BUF R i10",
"BUF i0 T",
"RELEASE",
// Left shift A by 5
"LOCK",
"BUF R i0",
"BUF i10 T",
"RELEASE",
// Left shift A by 6, capture the MSB, store in i8
"LOCK",
"BUF R i10",
"BUF i0 T",
"RELEASE",
// Capture next bit
"LOCK",
"BUF R i0",
"BUF i10 T",
"RELEASE",
// Capture next bit
"LOCK",
"BUF R i10",
"BUF i0 T",
"RELEASE",
// Capture next bit
"LOCK",
"BUF R i0",
"BUF i10 T",
"RELEASE",
// Capture next bit
"LOCK",
"BUF R i4",
"BUF i0 T",
"RELEASE",
// Capture next bit
"LOCK",
"BUF R i3",
"BUF i4 T",
"RELEASE",
// Capture next bit
"LOCK",
"BUF R i2",
"BUF i3 T",
"RELEASE",
// Capture next bit
"LOCK",
"BUF R i1",
"BUF i2 T",
"RELEASE",
// Store the upper half of A in the lower half of i11
"FILTER 3",
"COPY i4 i11",
"UNFILTER",
"FILTER 2",
"COPY i4 i11",
"UNFILTER",
"FILTER 1",
"COPY i4 i11",
"UNFILTER",
"FILTER 0",
"COPY i4 i11",
"UNFILTER",
// Begin Stage 1 ===============
// Full subtractor: i11 minus B
// i7 for borrow in
// i4 for borrow out
// i5 stores the potential output pre-MUX
// i0, i6 as intermediate
"FILTER 0",
"COPY c0 R",
"UNFILTER",
"LOCK",
"BUF R i7",
"NOR i11 B i9",
"NOR i11 i9 i12",
"NOR B i9 i13",
"NOR i12 i13 i14",
"NOR i14 c0 i6",
"NOR i7 i6 i9",
"NOR i7 i9 i12",
"NOR i6 i9 i13",
"NOR i12 i13 i14",
"NOR i14 c0 i5",
"NOR c0 i6 i4",
"NOR i4 c0 i9",
"NOR i7 c0 i12",
"NOR i9 i12 i6",
"NOR c0 i11 i4",
"NOR i4 c0 i9",
"NOR B c0 i12",
"NOR i9 i12 i0",
"OR i6 i0 i4",
"BUF i4 T",
"RELEASE",
// Create quotient bit
"FILTER 7",
"NOR c0 i7 i0",
"OR A i0 i6",
"BUF i6 T",
"UNFILTER",


"FILTER 0",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",

"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"UNFILTER",


"LOCK",
"BUF R i6",
"NOR c0 i6 i7",
"NOR i7 c0 i9",
"NOR i11 c0 i12",
"NOR i9 i12 i0",
"NOR i6 c0 i9",
"NOR i5 c0 i12",
"NOR i9 i12 i7",
"OR i7 i0 i10",
"BUF i6 L",
"RELEASE",


"LOCK",
"BUF R i11",
"BUF i10 L",
"RELEASE",


// Begin stage 2


"FILTER 0",
"COPY c0 R",
"COPY i3 i11",
"UNFILTER",
"LOCK",
"BUF R i7",
"NOR i11 B i9",
"NOR i11 i9 i12",
"NOR B i9 i13",
"NOR i12 i13 i14",
"NOR i14 c0 i6",
"NOR i7 i6 i9",
"NOR i7 i9 i12",
"NOR i6 i9 i13",
"NOR i12 i13 i14",
"NOR i14 c0 i5",
"NOR c0 i6 i4",
"NOR i4 c0 i9",
"NOR i7 c0 i12",
"NOR i9 i12 i6",
"NOR c0 i11 i4",
"NOR i4 c0 i9",
"NOR B c0 i12",
"NOR i9 i12 i0",
"OR i6 i0 i4",
"BUF i4 T",
"RELEASE",
// Create quotient bit
"FILTER 7",
"NOR c0 i7 i0",
"OR A i0 i6",
"BUF i6 T",
"UNFILTER",


"FILTER 0",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",

"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"UNFILTER",


"LOCK",
"BUF R i6",
"NOR c0 i6 i7",
"NOR i7 c0 i9",
"NOR i11 c0 i12",
"NOR i9 i12 i0",
"NOR i6 c0 i9",
"NOR i5 c0 i12",
"NOR i9 i12 i7",
"OR i7 i0 i10",
"BUF i6 L",
"RELEASE",


"LOCK",
"BUF R i11",
"BUF i10 L",
"RELEASE",


// Begin stage 3


"FILTER 0",
"COPY c0 R",
"COPY i2 i11",
"UNFILTER",
"LOCK",
"BUF R i7",
"NOR i11 B i9",
"NOR i11 i9 i12",
"NOR B i9 i13",
"NOR i12 i13 i14",
"NOR i14 c0 i6",
"NOR i7 i6 i9",
"NOR i7 i9 i12",
"NOR i6 i9 i13",
"NOR i12 i13 i14",
"NOR i14 c0 i5",
"NOR c0 i6 i4",
"NOR i4 c0 i9",
"NOR i7 c0 i12",
"NOR i9 i12 i6",
"NOR c0 i11 i4",
"NOR i4 c0 i9",
"NOR B c0 i12",
"NOR i9 i12 i0",
"OR i6 i0 i4",
"BUF i4 T",
"RELEASE",
// Create quotient bit
"FILTER 7",
"NOR c0 i7 i0",
"OR A i0 i6",
"BUF i6 T",
"UNFILTER",


"FILTER 0",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",

"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"UNFILTER",


"LOCK",
"BUF R i6",
"NOR c0 i6 i7",
"NOR i7 c0 i9",
"NOR i11 c0 i12",
"NOR i9 i12 i0",
"NOR i6 c0 i9",
"NOR i5 c0 i12",
"NOR i9 i12 i7",
"OR i7 i0 i10",
"BUF i6 L",
"RELEASE",


"LOCK",
"BUF R i11",
"BUF i10 L",
"RELEASE",


// Begin stage 4


"FILTER 0",
"COPY c0 R",
"COPY i1 i11",
"UNFILTER",
"LOCK",
"BUF R i7",
"NOR i11 B i9",
"NOR i11 i9 i12",
"NOR B i9 i13",
"NOR i12 i13 i14",
"NOR i14 c0 i6",
"NOR i7 i6 i9",
"NOR i7 i9 i12",
"NOR i6 i9 i13",
"NOR i12 i13 i14",
"NOR i14 c0 i5",
"NOR c0 i6 i4",
"NOR i4 c0 i9",
"NOR i7 c0 i12",
"NOR i9 i12 i6",
"NOR c0 i11 i4",
"NOR i4 c0 i9",
"NOR B c0 i12",
"NOR i9 i12 i0",
"OR i6 i0 i4",
"BUF i4 T",
"RELEASE",


// Create quotient bit
"FILTER 7",
"NOR c0 i7 i0",
"OR A i0 i6",
"BUF i6 T",
"UNFILTER",


"FILTER 0",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",

"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"UNFILTER",


"LOCK",
"BUF R i6",
"NOR c0 i6 i7",
"NOR i7 c0 i9",
"NOR i11 c0 i12",
"NOR i9 i12 i0",
"NOR i6 c0 i9",
"NOR i5 c0 i12",
"NOR i9 i12 i7",
"OR i7 i0 C",
"BUF i6 L",
"RELEASE"
}};
table.insert({"RDIV8", rdiv8});

/* ====================== QRDIV8 ============================= */
// Remainder division between 8 bit dividend A and 4 bit divisor B
// First stage dividend store in i11
// Second stage dvidend input in i3
// Third stage dividend input in i2
// Fourth stage dividen input in i1
deque <string> qrdiv8 {{
"COPY c0 C",
"COPY c0 i11",
// Shift the dividend in the correct place
// Left shift A by 1
"LOCK",
"BUF R i0",
"BUF A T",
"RELEASE",
// Left shift A by 2
"LOCK",
"BUF R i10",
"BUF i0 T",
"RELEASE",
// Left shift A by 3
"LOCK",
"BUF R i0",
"BUF i10 T",
"RELEASE",
// Left shift A by 4
"LOCK",
"BUF R i10",
"BUF i0 T",
"RELEASE",
// Left shift A by 5
"LOCK",
"BUF R i0",
"BUF i10 T",
"RELEASE",
// Left shift A by 6, capture the MSB, store in i8
"LOCK",
"BUF R i10",
"BUF i0 T",
"RELEASE",
// Capture next bit
"LOCK",
"BUF R i0",
"BUF i10 T",
"RELEASE",
// Capture next bit
"LOCK",
"BUF R i10",
"BUF i0 T",
"RELEASE",
// Capture next bit
"LOCK",
"BUF R i0",
"BUF i10 T",
"RELEASE",
// Capture next bit
"LOCK",
"BUF R i4",
"BUF i0 T",
"RELEASE",
// Capture next bit
"LOCK",
"BUF R i3",
"BUF i4 T",
"RELEASE",
// Capture next bit
"LOCK",
"BUF R i2",
"BUF i3 T",
"RELEASE",
// Capture next bit
"LOCK",
"BUF R i1",
"BUF i2 T",
"RELEASE",
// Store the upper half of A in the lower half of i11
"FILTER 3",
"COPY i4 i11",
"UNFILTER",
"FILTER 2",
"COPY i4 i11",
"UNFILTER",
"FILTER 1",
"COPY i4 i11",
"UNFILTER",
"FILTER 0",
"COPY i4 i11",
"UNFILTER",
// Begin Stage 1 ===============
// Full subtractor: i11 minus B
// i7 for borrow in
// i4 for borrow out
// i5 stores the potential output pre-MUX
// i0, i6 as intermediate
"FILTER 0",
"COPY c0 R",
"UNFILTER",
"LOCK",
"BUF R i7",
"NOR i11 B i9",
"NOR i11 i9 i12",
"NOR B i9 i13",
"NOR i12 i13 i14",
"NOR i14 c0 i6",
"NOR i7 i6 i9",
"NOR i7 i9 i12",
"NOR i6 i9 i13",
"NOR i12 i13 i14",
"NOR i14 c0 i5",
"NOR c0 i6 i4",
"NOR i4 c0 i9",
"NOR i7 c0 i12",
"NOR i9 i12 i6",
"NOR c0 i11 i4",
"NOR i4 c0 i9",
"NOR B c0 i12",
"NOR i9 i12 i0",
"OR i6 i0 i4",
"BUF i4 T",
"RELEASE",


// Create quotient bit
"FILTER 7",
"NOR c0 i7 i0",
"OR A i0 i6",
"BUF i6 T",
"UNFILTER",


"FILTER 0",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",

"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"UNFILTER",


"LOCK",
"BUF R i6",
"NOR c0 i6 i7",
"NOR i7 c0 i9",
"NOR i11 c0 i12",
"NOR i9 i12 i0",
"NOR i6 c0 i9",
"NOR i5 c0 i12",
"NOR i9 i12 i7",
"OR i7 i0 i10",
"BUF i6 L",
"RELEASE",


"LOCK",
"BUF R i11",
"BUF i10 L",
"RELEASE",


// latch quotient bit
"FILTER 3",
"COPY i6 C",
"UNFILTER",


// Begin stage 2


"FILTER 0",
"COPY c0 R",
"COPY i3 i11",
"UNFILTER",
"LOCK",
"BUF R i7",
"NOR i11 B i9",
"NOR i11 i9 i12",
"NOR B i9 i13",
"NOR i12 i13 i14",
"NOR i14 c0 i6",
"NOR i7 i6 i9",
"NOR i7 i9 i12",
"NOR i6 i9 i13",
"NOR i12 i13 i14",
"NOR i14 c0 i5",
"NOR c0 i6 i4",
"NOR i4 c0 i9",
"NOR i7 c0 i12",
"NOR i9 i12 i6",
"NOR c0 i11 i4",
"NOR i4 c0 i9",
"NOR B c0 i12",
"NOR i9 i12 i0",
"OR i6 i0 i4",
"BUF i4 T",
"RELEASE",
// Create quotient bit
"FILTER 7",
"NOR c0 i7 i0",
"OR A i0 i6",
"BUF i6 T",
"UNFILTER",


"FILTER 0",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",

"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"UNFILTER",


"LOCK",
"BUF R i6",
"NOR c0 i6 i7",
"NOR i7 c0 i9",
"NOR i11 c0 i12",
"NOR i9 i12 i0",
"NOR i6 c0 i9",
"NOR i5 c0 i12",
"NOR i9 i12 i7",
"OR i7 i0 i10",
"BUF i6 L",
"RELEASE",


"LOCK",
"BUF R i11",
"BUF i10 L",
"RELEASE",


// latch quotient bit
"FILTER 2",
"COPY i6 C",
"UNFILTER",


// Begin stage 3


"FILTER 0",
"COPY c0 R",
"COPY i2 i11",
"UNFILTER",
"LOCK",
"BUF R i7",
"NOR i11 B i9",
"NOR i11 i9 i12",
"NOR B i9 i13",
"NOR i12 i13 i14",
"NOR i14 c0 i6",
"NOR i7 i6 i9",
"NOR i7 i9 i12",
"NOR i6 i9 i13",
"NOR i12 i13 i14",
"NOR i14 c0 i5",
"NOR c0 i6 i4",
"NOR i4 c0 i9",
"NOR i7 c0 i12",
"NOR i9 i12 i6",
"NOR c0 i11 i4",
"NOR i4 c0 i9",
"NOR B c0 i12",
"NOR i9 i12 i0",
"OR i6 i0 i4",
"BUF i4 T",
"RELEASE",
// Create quotient bit
"FILTER 7",
"NOR c0 i7 i0",
"OR A i0 i6",
"BUF i6 T",
"UNFILTER",


"FILTER 0",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",

"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"UNFILTER",


"LOCK",
"BUF R i6",
"NOR c0 i6 i7",
"NOR i7 c0 i9",
"NOR i11 c0 i12",
"NOR i9 i12 i0",
"NOR i6 c0 i9",
"NOR i5 c0 i12",
"NOR i9 i12 i7",
"OR i7 i0 i10",
"BUF i6 L",
"RELEASE",


"LOCK",
"BUF R i11",
"BUF i10 L",
"RELEASE",


// latch quotient bit
"FILTER 1",
"COPY i6 C",
"UNFILTER",


// Begin stage 4


"FILTER 0",
"COPY c0 R",
"COPY i1 i11",
"UNFILTER",
"LOCK",
"BUF R i7",
"NOR i11 B i9",
"NOR i11 i9 i12",
"NOR B i9 i13",
"NOR i12 i13 i14",
"NOR i14 c0 i6",
"NOR i7 i6 i9",
"NOR i7 i9 i12",
"NOR i6 i9 i13",
"NOR i12 i13 i14",
"NOR i14 c0 i5",
"NOR c0 i6 i4",
"NOR i4 c0 i9",
"NOR i7 c0 i12",
"NOR i9 i12 i6",
"NOR c0 i11 i4",
"NOR i4 c0 i9",
"NOR B c0 i12",
"NOR i9 i12 i0",
"OR i6 i0 i4",
"BUF i4 T",
"RELEASE",


// Create quotient bit
"FILTER 7",
"NOR c0 i7 i0",
"OR A i0 i6",
"BUF i6 T",
"UNFILTER",


"FILTER 0",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",

"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"UNFILTER",


"LOCK",
"BUF R i6",
"NOR c0 i6 i7",
"NOR i7 c0 i9",
"NOR i11 c0 i12",
"NOR i9 i12 i0",
"NOR i6 c0 i9",
"NOR i5 c0 i12",
"NOR i9 i12 i7",
"OR i7 i0 B",
"BUF i6 L",
"RELEASE",


// latch quotient bit
"FILTER 0",
"COPY i6 C",
"UNFILTER"
}};
table.insert({"QRDIV8", qrdiv8});

/* ====================== QDIV8 ============================= */
// Remainder division between 8 bit dividend A and 4 bit divisor B
// First stage dividend store in i11
// Second stage dvidend input in i3
// Third stage dividend input in i2
// Fourth stage dividen input in i1
deque <string> qdiv8 {{
"COPY c0 C",
"COPY c0 i11",
// Shift the dividend in the correct place
// Left shift A by 1
"LOCK",
"BUF R i0",
"BUF A T",
"RELEASE",
// Left shift A by 2
"LOCK",
"BUF R i10",
"BUF i0 T",
"RELEASE",
// Left shift A by 3
"LOCK",
"BUF R i0",
"BUF i10 T",
"RELEASE",
// Left shift A by 4
"LOCK",
"BUF R i10",
"BUF i0 T",
"RELEASE",
// Left shift A by 5
"LOCK",
"BUF R i0",
"BUF i10 T",
"RELEASE",
// Left shift A by 6, capture the MSB, store in i8
"LOCK",
"BUF R i10",
"BUF i0 T",
"RELEASE",
// Capture next bit
"LOCK",
"BUF R i0",
"BUF i10 T",
"RELEASE",
// Capture next bit
"LOCK",
"BUF R i10",
"BUF i0 T",
"RELEASE",
// Capture next bit
"LOCK",
"BUF R i0",
"BUF i10 T",
"RELEASE",
// Capture next bit
"LOCK",
"BUF R i4",
"BUF i0 T",
"RELEASE",
// Capture next bit
"LOCK",
"BUF R i3",
"BUF i4 T",
"RELEASE",
// Capture next bit
"LOCK",
"BUF R i2",
"BUF i3 T",
"RELEASE",
// Capture next bit
"LOCK",
"BUF R i1",
"BUF i2 T",
"RELEASE",
// Store the upper half of A in the lower half of i11
"FILTER 3",
"COPY i4 i11",
"UNFILTER",
"FILTER 2",
"COPY i4 i11",
"UNFILTER",
"FILTER 1",
"COPY i4 i11",
"UNFILTER",
"FILTER 0",
"COPY i4 i11",
"UNFILTER",
// Begin Stage 1 ===============
// Full subtractor: i11 minus B
// i7 for borrow in
// i4 for borrow out
// i5 stores the potential output pre-MUX
// i0, i6 as intermediate
"FILTER 0",
"COPY c0 R",
"UNFILTER",
"LOCK",
"BUF R i7",
"NOR i11 B i9",
"NOR i11 i9 i12",
"NOR B i9 i13",
"NOR i12 i13 i14",
"NOR i14 c0 i6",
"NOR i7 i6 i9",
"NOR i7 i9 i12",
"NOR i6 i9 i13",
"NOR i12 i13 i14",
"NOR i14 c0 i5",
"NOR c0 i6 i4",
"NOR i4 c0 i9",
"NOR i7 c0 i12",
"NOR i9 i12 i6",
"NOR c0 i11 i4",
"NOR i4 c0 i9",
"NOR B c0 i12",
"NOR i9 i12 i0",
"OR i6 i0 i4",
"BUF i4 T",
"RELEASE",


// Create quotient bit
"FILTER 7",
"NOR c0 i7 i0",
"OR A i0 i6",
"BUF i6 T",
"UNFILTER",


"FILTER 0",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",

"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"UNFILTER",


"LOCK",
"BUF R i6",
"NOR c0 i6 i7",
"NOR i7 c0 i9",
"NOR i11 c0 i12",
"NOR i9 i12 i0",
"NOR i6 c0 i9",
"NOR i5 c0 i12",
"NOR i9 i12 i7",
"OR i7 i0 i10",
"BUF i6 L",
"RELEASE",


"LOCK",
"BUF R i11",
"BUF i10 L",
"RELEASE",


// latch quotient bit
"FILTER 3",
"COPY i6 C",
"UNFILTER",


// Begin stage 2


"FILTER 0",
"COPY c0 R",
"COPY i3 i11",
"UNFILTER",
"LOCK",
"BUF R i7",
"NOR i11 B i9",
"NOR i11 i9 i12",
"NOR B i9 i13",
"NOR i12 i13 i14",
"NOR i14 c0 i6",
"NOR i7 i6 i9",
"NOR i7 i9 i12",
"NOR i6 i9 i13",
"NOR i12 i13 i14",
"NOR i14 c0 i5",
"NOR c0 i6 i4",
"NOR i4 c0 i9",
"NOR i7 c0 i12",
"NOR i9 i12 i6",
"NOR c0 i11 i4",
"NOR i4 c0 i9",
"NOR B c0 i12",
"NOR i9 i12 i0",
"OR i6 i0 i4",
"BUF i4 T",
"RELEASE",
// Create quotient bit
"FILTER 7",
"NOR c0 i7 i0",
"OR A i0 i6",
"BUF i6 T",
"UNFILTER",


"FILTER 0",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",

"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"UNFILTER",


"LOCK",
"BUF R i6",
"NOR c0 i6 i7",
"NOR i7 c0 i9",
"NOR i11 c0 i12",
"NOR i9 i12 i0",
"NOR i6 c0 i9",
"NOR i5 c0 i12",
"NOR i9 i12 i7",
"OR i7 i0 i10",
"BUF i6 L",
"RELEASE",


"LOCK",
"BUF R i11",
"BUF i10 L",
"RELEASE",


// latch quotient bit
"FILTER 2",
"COPY i6 C",
"UNFILTER",


// Begin stage 3


"FILTER 0",
"COPY c0 R",
"COPY i2 i11",
"UNFILTER",
"LOCK",
"BUF R i7",
"NOR i11 B i9",
"NOR i11 i9 i12",
"NOR B i9 i13",
"NOR i12 i13 i14",
"NOR i14 c0 i6",
"NOR i7 i6 i9",
"NOR i7 i9 i12",
"NOR i6 i9 i13",
"NOR i12 i13 i14",
"NOR i14 c0 i5",
"NOR c0 i6 i4",
"NOR i4 c0 i9",
"NOR i7 c0 i12",
"NOR i9 i12 i6",
"NOR c0 i11 i4",
"NOR i4 c0 i9",
"NOR B c0 i12",
"NOR i9 i12 i0",
"OR i6 i0 i4",
"BUF i4 T",
"RELEASE",
// Create quotient bit
"FILTER 7",
"NOR c0 i7 i0",
"OR A i0 i6",
"BUF i6 T",
"UNFILTER",


"FILTER 0",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",

"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"UNFILTER",


"LOCK",
"BUF R i6",
"NOR c0 i6 i7",
"NOR i7 c0 i9",
"NOR i11 c0 i12",
"NOR i9 i12 i0",
"NOR i6 c0 i9",
"NOR i5 c0 i12",
"NOR i9 i12 i7",
"OR i7 i0 i10",
"BUF i6 L",
"RELEASE",


"LOCK",
"BUF R i11",
"BUF i10 L",
"RELEASE",


// latch quotient bit
"FILTER 1",
"COPY i6 C",
"UNFILTER",


// Begin stage 4


"FILTER 0",
"COPY c0 R",
"COPY i1 i11",
"UNFILTER",
"LOCK",
"BUF R i7",
"NOR i11 B i9",
"NOR i11 i9 i12",
"NOR B i9 i13",
"NOR i12 i13 i14",
"NOR i14 c0 i6",
"NOR i7 i6 i9",
"NOR i7 i9 i12",
"NOR i6 i9 i13",
"NOR i12 i13 i14",
"NOR i14 c0 i5",
"NOR c0 i6 i4",
"NOR i4 c0 i9",
"NOR i7 c0 i12",
"NOR i9 i12 i6",
"NOR c0 i11 i4",
"NOR i4 c0 i9",
"NOR B c0 i12",
"NOR i9 i12 i0",
"OR i6 i0 i4",
"BUF i4 T",
"RELEASE",


// Create quotient bit
"FILTER 7",
"NOR c0 i7 i0",
"OR A i0 i6",
"BUF i6 T",
"UNFILTER",


"FILTER 0",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",

"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"NOP",
"UNFILTER",


"LOCK",
"BUF R i6",
"NOR c0 i6 i7",
"NOR i7 c0 i9",
"NOR i11 c0 i12",
"NOR i9 i12 i0",
"NOR i6 c0 i9",
"NOR i5 c0 i12",
"NOR i9 i12 i7",
"OR i7 i0 i10",
"BUF i6 L",
"RELEASE",


// latch quotient bit
"FILTER 0",
"COPY i6 C",
"UNFILTER"
}};
table.insert({"QDIV8", qdiv8});

return table;
};
};

#endif
